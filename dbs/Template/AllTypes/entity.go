package AllTypes

// ---------------------------------------------------------------
// The code in this file is autogenerated, do not modify manually!
// ---------------------------------------------------------------

import (
	"context"
	"database/sql"
	"strings"
	"sync"
)

const (
	FQTN                 = "`template`.`all_types`"
	FieldId              = "id"
	FieldTinySigned      = "tiny_signed"
	FieldTinyUnsigned    = "tiny_unsigned"
	FieldSmallSigned     = "small_signed"
	FieldSmallUnsigned   = "small_unsigned"
	FieldMediumSigned    = "medium_signed"
	FieldMediumUnsigned  = "medium_unsigned"
	FieldIntSigned       = "int_signed"
	FieldIntUnsigned     = "int_unsigned"
	FieldBigSigned       = "big_signed"
	FieldBigUnsigned     = "big_unsigned"
	FieldFloatField      = "float_field"
	FieldDoubleField     = "double_field"
	FieldRealField       = "real_field"
	FieldDecimalField    = "decimal_field"
	FieldDecField        = "dec_field"
	FieldNumericField    = "numeric_field"
	FieldFixedField      = "fixed_field"
	FieldBit1            = "bit1"
	FieldBit8            = "bit8"
	FieldBit64           = "bit64"
	FieldBoolField       = "bool_field"
	FieldBooleanField    = "boolean_field"
	FieldCharField       = "char_field"
	FieldVarcharField    = "varchar_field"
	FieldTextField       = "text_field"
	FieldTinytextField   = "tinytext_field"
	FieldMediumtextField = "mediumtext_field"
	FieldLongtextField   = "longtext_field"
	FieldEnumField       = "enum_field"
	FieldSetField        = "set_field"
	FieldBinaryField     = "binary_field"
	FieldVarbinaryField  = "varbinary_field"
	FieldBlobField       = "blob_field"
	FieldTinyblobField   = "tinyblob_field"
	FieldMediumblobField = "mediumblob_field"
	FieldLongblobField   = "longblob_field"
	FieldDateField       = "date_field"
	FieldTimeField       = "time_field"
	FieldYearField       = "year_field"
	FieldDatetimeField   = "datetime_field"
	FieldTimestampField  = "timestamp_field"
	FieldUuidField       = "uuid_field"
)

var (
	Fields    = []string{FieldId, FieldTinySigned, FieldTinyUnsigned, FieldSmallSigned, FieldSmallUnsigned, FieldMediumSigned, FieldMediumUnsigned, FieldIntSigned, FieldIntUnsigned, FieldBigSigned, FieldBigUnsigned, FieldFloatField, FieldDoubleField, FieldRealField, FieldDecimalField, FieldDecField, FieldNumericField, FieldFixedField, FieldBit1, FieldBit8, FieldBit64, FieldBoolField, FieldBooleanField, FieldCharField, FieldVarcharField, FieldTextField, FieldTinytextField, FieldMediumtextField, FieldLongtextField, FieldEnumField, FieldSetField, FieldBinaryField, FieldVarbinaryField, FieldBlobField, FieldTinyblobField, FieldMediumblobField, FieldLongblobField, FieldDateField, FieldTimeField, FieldYearField, FieldDatetimeField, FieldTimestampField, FieldUuidField}
	db        *sql.DB
	stmtMu    sync.RWMutex
	stmtCache = make(map[string]*sql.Stmt)
)

type Entity struct {
	Id              string
	TinySigned      string
	TinyUnsigned    string
	SmallSigned     string
	SmallUnsigned   string
	MediumSigned    string
	MediumUnsigned  string
	IntSigned       string
	IntUnsigned     string
	BigSigned       string
	BigUnsigned     string
	FloatField      string
	DoubleField     string
	RealField       string
	DecimalField    string
	DecField        string
	NumericField    string
	FixedField      string
	Bit1            string
	Bit8            string
	Bit64           string
	BoolField       string
	BooleanField    string
	CharField       string
	VarcharField    string
	TextField       string
	TinytextField   string
	MediumtextField string
	LongtextField   string
	EnumField       string
	SetField        string
	BinaryField     string
	VarbinaryField  string
	BlobField       string
	TinyblobField   string
	MediumblobField string
	LongblobField   string
	DateField       string
	TimeField       string
	YearField       string
	DatetimeField   string
	TimestampField  string
	UuidField       string
}

func SetDB(x *sql.DB) {
	db = x
}

func (x *Entity) GetFieldValues(fieldList []string) []any {
	values := make([]any, 0, len(fieldList))

	for _, field := range fieldList {
		switch field {
		case FieldId:
			values = append(values, x.Id)
		case FieldTinySigned:
			values = append(values, x.TinySigned)
		case FieldTinyUnsigned:
			values = append(values, x.TinyUnsigned)
		case FieldSmallSigned:
			values = append(values, x.SmallSigned)
		case FieldSmallUnsigned:
			values = append(values, x.SmallUnsigned)
		case FieldMediumSigned:
			values = append(values, x.MediumSigned)
		case FieldMediumUnsigned:
			values = append(values, x.MediumUnsigned)
		case FieldIntSigned:
			values = append(values, x.IntSigned)
		case FieldIntUnsigned:
			values = append(values, x.IntUnsigned)
		case FieldBigSigned:
			values = append(values, x.BigSigned)
		case FieldBigUnsigned:
			values = append(values, x.BigUnsigned)
		case FieldFloatField:
			values = append(values, x.FloatField)
		case FieldDoubleField:
			values = append(values, x.DoubleField)
		case FieldRealField:
			values = append(values, x.RealField)
		case FieldDecimalField:
			values = append(values, x.DecimalField)
		case FieldDecField:
			values = append(values, x.DecField)
		case FieldNumericField:
			values = append(values, x.NumericField)
		case FieldFixedField:
			values = append(values, x.FixedField)
		case FieldBit1:
			values = append(values, x.Bit1)
		case FieldBit8:
			values = append(values, x.Bit8)
		case FieldBit64:
			values = append(values, x.Bit64)
		case FieldBoolField:
			values = append(values, x.BoolField)
		case FieldBooleanField:
			values = append(values, x.BooleanField)
		case FieldCharField:
			values = append(values, x.CharField)
		case FieldVarcharField:
			values = append(values, x.VarcharField)
		case FieldTextField:
			values = append(values, x.TextField)
		case FieldTinytextField:
			values = append(values, x.TinytextField)
		case FieldMediumtextField:
			values = append(values, x.MediumtextField)
		case FieldLongtextField:
			values = append(values, x.LongtextField)
		case FieldEnumField:
			values = append(values, x.EnumField)
		case FieldSetField:
			values = append(values, x.SetField)
		case FieldBinaryField:
			values = append(values, x.BinaryField)
		case FieldVarbinaryField:
			values = append(values, x.VarbinaryField)
		case FieldBlobField:
			values = append(values, x.BlobField)
		case FieldTinyblobField:
			values = append(values, x.TinyblobField)
		case FieldMediumblobField:
			values = append(values, x.MediumblobField)
		case FieldLongblobField:
			values = append(values, x.LongblobField)
		case FieldDateField:
			values = append(values, x.DateField)
		case FieldTimeField:
			values = append(values, x.TimeField)
		case FieldYearField:
			values = append(values, x.YearField)
		case FieldDatetimeField:
			values = append(values, x.DatetimeField)
		case FieldTimestampField:
			values = append(values, x.TimestampField)
		case FieldUuidField:
			values = append(values, x.UuidField)
		}
	}

	return values
}

func GetFieldPlaceholders(fieldList []string) []string {
	placeholders := make([]string, 0, len(fieldList))

	for _, field := range fieldList {
		switch field {
		case FieldId:
			placeholders = append(placeholders, "?")
		case FieldTinySigned:
			placeholders = append(placeholders, "?")
		case FieldTinyUnsigned:
			placeholders = append(placeholders, "?")
		case FieldSmallSigned:
			placeholders = append(placeholders, "?")
		case FieldSmallUnsigned:
			placeholders = append(placeholders, "?")
		case FieldMediumSigned:
			placeholders = append(placeholders, "?")
		case FieldMediumUnsigned:
			placeholders = append(placeholders, "?")
		case FieldIntSigned:
			placeholders = append(placeholders, "?")
		case FieldIntUnsigned:
			placeholders = append(placeholders, "?")
		case FieldBigSigned:
			placeholders = append(placeholders, "?")
		case FieldBigUnsigned:
			placeholders = append(placeholders, "?")
		case FieldFloatField:
			placeholders = append(placeholders, "?")
		case FieldDoubleField:
			placeholders = append(placeholders, "?")
		case FieldRealField:
			placeholders = append(placeholders, "?")
		case FieldDecimalField:
			placeholders = append(placeholders, "?")
		case FieldDecField:
			placeholders = append(placeholders, "?")
		case FieldNumericField:
			placeholders = append(placeholders, "?")
		case FieldFixedField:
			placeholders = append(placeholders, "?")
		case FieldBit1:
			placeholders = append(placeholders, "?")
		case FieldBit8:
			placeholders = append(placeholders, "?")
		case FieldBit64:
			placeholders = append(placeholders, "?")
		case FieldBoolField:
			placeholders = append(placeholders, "?")
		case FieldBooleanField:
			placeholders = append(placeholders, "?")
		case FieldCharField:
			placeholders = append(placeholders, "?")
		case FieldVarcharField:
			placeholders = append(placeholders, "?")
		case FieldTextField:
			placeholders = append(placeholders, "?")
		case FieldTinytextField:
			placeholders = append(placeholders, "?")
		case FieldMediumtextField:
			placeholders = append(placeholders, "?")
		case FieldLongtextField:
			placeholders = append(placeholders, "?")
		case FieldEnumField:
			placeholders = append(placeholders, "?")
		case FieldSetField:
			placeholders = append(placeholders, "?")
		case FieldBinaryField:
			placeholders = append(placeholders, "?")
		case FieldVarbinaryField:
			placeholders = append(placeholders, "?")
		case FieldBlobField:
			placeholders = append(placeholders, "?")
		case FieldTinyblobField:
			placeholders = append(placeholders, "?")
		case FieldMediumblobField:
			placeholders = append(placeholders, "?")
		case FieldLongblobField:
			placeholders = append(placeholders, "?")
		case FieldDateField:
			placeholders = append(placeholders, "?")
		case FieldTimeField:
			placeholders = append(placeholders, "?")
		case FieldYearField:
			placeholders = append(placeholders, "?")
		case FieldDatetimeField:
			placeholders = append(placeholders, "?")
		case FieldTimestampField:
			placeholders = append(placeholders, "?")
		case FieldUuidField:
			placeholders = append(placeholders, "?")
		}
	}

	return placeholders
}

func GetBacktickedField(field string) string {
	switch field {
	case FieldId:
		return FQTN + ".`" + FieldId + "`"
	case FieldTinySigned:
		return FQTN + ".`" + FieldTinySigned + "`"
	case FieldTinyUnsigned:
		return FQTN + ".`" + FieldTinyUnsigned + "`"
	case FieldSmallSigned:
		return FQTN + ".`" + FieldSmallSigned + "`"
	case FieldSmallUnsigned:
		return FQTN + ".`" + FieldSmallUnsigned + "`"
	case FieldMediumSigned:
		return FQTN + ".`" + FieldMediumSigned + "`"
	case FieldMediumUnsigned:
		return FQTN + ".`" + FieldMediumUnsigned + "`"
	case FieldIntSigned:
		return FQTN + ".`" + FieldIntSigned + "`"
	case FieldIntUnsigned:
		return FQTN + ".`" + FieldIntUnsigned + "`"
	case FieldBigSigned:
		return FQTN + ".`" + FieldBigSigned + "`"
	case FieldBigUnsigned:
		return FQTN + ".`" + FieldBigUnsigned + "`"
	case FieldFloatField:
		return FQTN + ".`" + FieldFloatField + "`"
	case FieldDoubleField:
		return FQTN + ".`" + FieldDoubleField + "`"
	case FieldRealField:
		return FQTN + ".`" + FieldRealField + "`"
	case FieldDecimalField:
		return FQTN + ".`" + FieldDecimalField + "`"
	case FieldDecField:
		return FQTN + ".`" + FieldDecField + "`"
	case FieldNumericField:
		return FQTN + ".`" + FieldNumericField + "`"
	case FieldFixedField:
		return FQTN + ".`" + FieldFixedField + "`"
	case FieldBit1:
		return FQTN + ".`" + FieldBit1 + "`"
	case FieldBit8:
		return FQTN + ".`" + FieldBit8 + "`"
	case FieldBit64:
		return FQTN + ".`" + FieldBit64 + "`"
	case FieldBoolField:
		return FQTN + ".`" + FieldBoolField + "`"
	case FieldBooleanField:
		return FQTN + ".`" + FieldBooleanField + "`"
	case FieldCharField:
		return FQTN + ".`" + FieldCharField + "`"
	case FieldVarcharField:
		return FQTN + ".`" + FieldVarcharField + "`"
	case FieldTextField:
		return FQTN + ".`" + FieldTextField + "`"
	case FieldTinytextField:
		return FQTN + ".`" + FieldTinytextField + "`"
	case FieldMediumtextField:
		return FQTN + ".`" + FieldMediumtextField + "`"
	case FieldLongtextField:
		return FQTN + ".`" + FieldLongtextField + "`"
	case FieldEnumField:
		return FQTN + ".`" + FieldEnumField + "`"
	case FieldSetField:
		return FQTN + ".`" + FieldSetField + "`"
	case FieldBinaryField:
		return FQTN + ".`" + FieldBinaryField + "`"
	case FieldVarbinaryField:
		return FQTN + ".`" + FieldVarbinaryField + "`"
	case FieldBlobField:
		return FQTN + ".`" + FieldBlobField + "`"
	case FieldTinyblobField:
		return FQTN + ".`" + FieldTinyblobField + "`"
	case FieldMediumblobField:
		return FQTN + ".`" + FieldMediumblobField + "`"
	case FieldLongblobField:
		return FQTN + ".`" + FieldLongblobField + "`"
	case FieldDateField:
		return FQTN + ".`" + FieldDateField + "`"
	case FieldTimeField:
		return FQTN + ".`" + FieldTimeField + "`"
	case FieldYearField:
		return FQTN + ".`" + FieldYearField + "`"
	case FieldDatetimeField:
		return FQTN + ".`" + FieldDatetimeField + "`"
	case FieldTimestampField:
		return FQTN + ".`" + FieldTimestampField + "`"
	case FieldUuidField:
		return FQTN + ".`" + FieldUuidField + "`"
	}
	return ""
}

func GetBacktickedFields(fieldList []string) []string {
	fields := make([]string, 0, len(fieldList))
	for _, field := range fieldList {
		fields = append(fields, GetBacktickedField(field))
	}
	return fields
}

func GetFieldPlaceholder(field string) string {
	switch field {
	case FieldId:
		return FQTN + ".`" + FieldId + "` = ?"
	case FieldTinySigned:
		return FQTN + ".`" + FieldTinySigned + "` = ?"
	case FieldTinyUnsigned:
		return FQTN + ".`" + FieldTinyUnsigned + "` = ?"
	case FieldSmallSigned:
		return FQTN + ".`" + FieldSmallSigned + "` = ?"
	case FieldSmallUnsigned:
		return FQTN + ".`" + FieldSmallUnsigned + "` = ?"
	case FieldMediumSigned:
		return FQTN + ".`" + FieldMediumSigned + "` = ?"
	case FieldMediumUnsigned:
		return FQTN + ".`" + FieldMediumUnsigned + "` = ?"
	case FieldIntSigned:
		return FQTN + ".`" + FieldIntSigned + "` = ?"
	case FieldIntUnsigned:
		return FQTN + ".`" + FieldIntUnsigned + "` = ?"
	case FieldBigSigned:
		return FQTN + ".`" + FieldBigSigned + "` = ?"
	case FieldBigUnsigned:
		return FQTN + ".`" + FieldBigUnsigned + "` = ?"
	case FieldFloatField:
		return FQTN + ".`" + FieldFloatField + "` = ?"
	case FieldDoubleField:
		return FQTN + ".`" + FieldDoubleField + "` = ?"
	case FieldRealField:
		return FQTN + ".`" + FieldRealField + "` = ?"
	case FieldDecimalField:
		return FQTN + ".`" + FieldDecimalField + "` = ?"
	case FieldDecField:
		return FQTN + ".`" + FieldDecField + "` = ?"
	case FieldNumericField:
		return FQTN + ".`" + FieldNumericField + "` = ?"
	case FieldFixedField:
		return FQTN + ".`" + FieldFixedField + "` = ?"
	case FieldBit1:
		return FQTN + ".`" + FieldBit1 + "` = ?"
	case FieldBit8:
		return FQTN + ".`" + FieldBit8 + "` = ?"
	case FieldBit64:
		return FQTN + ".`" + FieldBit64 + "` = ?"
	case FieldBoolField:
		return FQTN + ".`" + FieldBoolField + "` = ?"
	case FieldBooleanField:
		return FQTN + ".`" + FieldBooleanField + "` = ?"
	case FieldCharField:
		return FQTN + ".`" + FieldCharField + "` = ?"
	case FieldVarcharField:
		return FQTN + ".`" + FieldVarcharField + "` = ?"
	case FieldTextField:
		return FQTN + ".`" + FieldTextField + "` = ?"
	case FieldTinytextField:
		return FQTN + ".`" + FieldTinytextField + "` = ?"
	case FieldMediumtextField:
		return FQTN + ".`" + FieldMediumtextField + "` = ?"
	case FieldLongtextField:
		return FQTN + ".`" + FieldLongtextField + "` = ?"
	case FieldEnumField:
		return FQTN + ".`" + FieldEnumField + "` = ?"
	case FieldSetField:
		return FQTN + ".`" + FieldSetField + "` = ?"
	case FieldBinaryField:
		return FQTN + ".`" + FieldBinaryField + "` = ?"
	case FieldVarbinaryField:
		return FQTN + ".`" + FieldVarbinaryField + "` = ?"
	case FieldBlobField:
		return FQTN + ".`" + FieldBlobField + "` = ?"
	case FieldTinyblobField:
		return FQTN + ".`" + FieldTinyblobField + "` = ?"
	case FieldMediumblobField:
		return FQTN + ".`" + FieldMediumblobField + "` = ?"
	case FieldLongblobField:
		return FQTN + ".`" + FieldLongblobField + "` = ?"
	case FieldDateField:
		return FQTN + ".`" + FieldDateField + "` = ?"
	case FieldTimeField:
		return FQTN + ".`" + FieldTimeField + "` = ?"
	case FieldYearField:
		return FQTN + ".`" + FieldYearField + "` = ?"
	case FieldDatetimeField:
		return FQTN + ".`" + FieldDatetimeField + "` = ?"
	case FieldTimestampField:
		return FQTN + ".`" + FieldTimestampField + "` = ?"
	case FieldUuidField:
		return FQTN + ".`" + FieldUuidField + "` = ?"
	}
	return ""
}

func GetFieldPlaceholdersWithName(fieldList []string) []string {
	placeholders := make([]string, 0, len(fieldList))
	for _, field := range fieldList {
		placeholders = append(placeholders, GetFieldPlaceholder(field))
	}
	return placeholders
}

func getPreparedStmt(query string) (*sql.Stmt, error) {
	stmtMu.RLock()
	if stmt, ok := stmtCache[query]; ok {
		stmtMu.RUnlock()
		return stmt, nil
	}
	stmtMu.RUnlock()

	stmtMu.Lock()
	defer stmtMu.Unlock()
	if stmt, ok := stmtCache[query]; ok {
		return stmt, nil
	}
	stmt, err := db.Prepare(query)
	if err != nil {
		return nil, err
	}
	stmtCache[query] = stmt
	return stmt, nil
}

func scanRow(fields []string, rows *sql.Rows) (*Entity, error) {
	x := &Entity{}
	var (
		ptrId              *string
		ptrTinySigned      *string
		ptrTinyUnsigned    *string
		ptrSmallSigned     *string
		ptrSmallUnsigned   *string
		ptrMediumSigned    *string
		ptrMediumUnsigned  *string
		ptrIntSigned       *string
		ptrIntUnsigned     *string
		ptrBigSigned       *string
		ptrBigUnsigned     *string
		ptrFloatField      *string
		ptrDoubleField     *string
		ptrRealField       *string
		ptrDecimalField    *string
		ptrDecField        *string
		ptrNumericField    *string
		ptrFixedField      *string
		ptrBit1            *string
		ptrBit8            *string
		ptrBit64           *string
		ptrBoolField       *string
		ptrBooleanField    *string
		ptrCharField       *string
		ptrVarcharField    *string
		ptrTextField       *string
		ptrTinytextField   *string
		ptrMediumtextField *string
		ptrLongtextField   *string
		ptrEnumField       *string
		ptrSetField        *string
		ptrBinaryField     *string
		ptrVarbinaryField  *string
		ptrBlobField       *string
		ptrTinyblobField   *string
		ptrMediumblobField *string
		ptrLongblobField   *string
		ptrDateField       *string
		ptrTimeField       *string
		ptrYearField       *string
		ptrDatetimeField   *string
		ptrTimestampField  *string
		ptrUuidField       *string
		scanTargets        []any
	)

	for _, field := range fields {
		switch field {
		case FieldId:
			scanTargets = append(scanTargets, &ptrId)
		case FieldTinySigned:
			scanTargets = append(scanTargets, &ptrTinySigned)
		case FieldTinyUnsigned:
			scanTargets = append(scanTargets, &ptrTinyUnsigned)
		case FieldSmallSigned:
			scanTargets = append(scanTargets, &ptrSmallSigned)
		case FieldSmallUnsigned:
			scanTargets = append(scanTargets, &ptrSmallUnsigned)
		case FieldMediumSigned:
			scanTargets = append(scanTargets, &ptrMediumSigned)
		case FieldMediumUnsigned:
			scanTargets = append(scanTargets, &ptrMediumUnsigned)
		case FieldIntSigned:
			scanTargets = append(scanTargets, &ptrIntSigned)
		case FieldIntUnsigned:
			scanTargets = append(scanTargets, &ptrIntUnsigned)
		case FieldBigSigned:
			scanTargets = append(scanTargets, &ptrBigSigned)
		case FieldBigUnsigned:
			scanTargets = append(scanTargets, &ptrBigUnsigned)
		case FieldFloatField:
			scanTargets = append(scanTargets, &ptrFloatField)
		case FieldDoubleField:
			scanTargets = append(scanTargets, &ptrDoubleField)
		case FieldRealField:
			scanTargets = append(scanTargets, &ptrRealField)
		case FieldDecimalField:
			scanTargets = append(scanTargets, &ptrDecimalField)
		case FieldDecField:
			scanTargets = append(scanTargets, &ptrDecField)
		case FieldNumericField:
			scanTargets = append(scanTargets, &ptrNumericField)
		case FieldFixedField:
			scanTargets = append(scanTargets, &ptrFixedField)
		case FieldBit1:
			scanTargets = append(scanTargets, &ptrBit1)
		case FieldBit8:
			scanTargets = append(scanTargets, &ptrBit8)
		case FieldBit64:
			scanTargets = append(scanTargets, &ptrBit64)
		case FieldBoolField:
			scanTargets = append(scanTargets, &ptrBoolField)
		case FieldBooleanField:
			scanTargets = append(scanTargets, &ptrBooleanField)
		case FieldCharField:
			scanTargets = append(scanTargets, &ptrCharField)
		case FieldVarcharField:
			scanTargets = append(scanTargets, &ptrVarcharField)
		case FieldTextField:
			scanTargets = append(scanTargets, &ptrTextField)
		case FieldTinytextField:
			scanTargets = append(scanTargets, &ptrTinytextField)
		case FieldMediumtextField:
			scanTargets = append(scanTargets, &ptrMediumtextField)
		case FieldLongtextField:
			scanTargets = append(scanTargets, &ptrLongtextField)
		case FieldEnumField:
			scanTargets = append(scanTargets, &ptrEnumField)
		case FieldSetField:
			scanTargets = append(scanTargets, &ptrSetField)
		case FieldBinaryField:
			scanTargets = append(scanTargets, &ptrBinaryField)
		case FieldVarbinaryField:
			scanTargets = append(scanTargets, &ptrVarbinaryField)
		case FieldBlobField:
			scanTargets = append(scanTargets, &ptrBlobField)
		case FieldTinyblobField:
			scanTargets = append(scanTargets, &ptrTinyblobField)
		case FieldMediumblobField:
			scanTargets = append(scanTargets, &ptrMediumblobField)
		case FieldLongblobField:
			scanTargets = append(scanTargets, &ptrLongblobField)
		case FieldDateField:
			scanTargets = append(scanTargets, &ptrDateField)
		case FieldTimeField:
			scanTargets = append(scanTargets, &ptrTimeField)
		case FieldYearField:
			scanTargets = append(scanTargets, &ptrYearField)
		case FieldDatetimeField:
			scanTargets = append(scanTargets, &ptrDatetimeField)
		case FieldTimestampField:
			scanTargets = append(scanTargets, &ptrTimestampField)
		case FieldUuidField:
			scanTargets = append(scanTargets, &ptrUuidField)
		}
	}

	err := rows.Scan(scanTargets...)
	if err != nil {
		return nil, err
	}

	if ptrId != nil {
		x.Id = *ptrId
	} else {
		x.Id = ""
	}
	if ptrTinySigned != nil {
		x.TinySigned = *ptrTinySigned
	} else {
		x.TinySigned = ""
	}
	if ptrTinyUnsigned != nil {
		x.TinyUnsigned = *ptrTinyUnsigned
	} else {
		x.TinyUnsigned = ""
	}
	if ptrSmallSigned != nil {
		x.SmallSigned = *ptrSmallSigned
	} else {
		x.SmallSigned = ""
	}
	if ptrSmallUnsigned != nil {
		x.SmallUnsigned = *ptrSmallUnsigned
	} else {
		x.SmallUnsigned = ""
	}
	if ptrMediumSigned != nil {
		x.MediumSigned = *ptrMediumSigned
	} else {
		x.MediumSigned = ""
	}
	if ptrMediumUnsigned != nil {
		x.MediumUnsigned = *ptrMediumUnsigned
	} else {
		x.MediumUnsigned = ""
	}
	if ptrIntSigned != nil {
		x.IntSigned = *ptrIntSigned
	} else {
		x.IntSigned = ""
	}
	if ptrIntUnsigned != nil {
		x.IntUnsigned = *ptrIntUnsigned
	} else {
		x.IntUnsigned = ""
	}
	if ptrBigSigned != nil {
		x.BigSigned = *ptrBigSigned
	} else {
		x.BigSigned = ""
	}
	if ptrBigUnsigned != nil {
		x.BigUnsigned = *ptrBigUnsigned
	} else {
		x.BigUnsigned = ""
	}
	if ptrFloatField != nil {
		x.FloatField = *ptrFloatField
	} else {
		x.FloatField = ""
	}
	if ptrDoubleField != nil {
		x.DoubleField = *ptrDoubleField
	} else {
		x.DoubleField = ""
	}
	if ptrRealField != nil {
		x.RealField = *ptrRealField
	} else {
		x.RealField = ""
	}
	if ptrDecimalField != nil {
		x.DecimalField = *ptrDecimalField
	} else {
		x.DecimalField = ""
	}
	if ptrDecField != nil {
		x.DecField = *ptrDecField
	} else {
		x.DecField = ""
	}
	if ptrNumericField != nil {
		x.NumericField = *ptrNumericField
	} else {
		x.NumericField = ""
	}
	if ptrFixedField != nil {
		x.FixedField = *ptrFixedField
	} else {
		x.FixedField = ""
	}
	if ptrBit1 != nil {
		x.Bit1 = *ptrBit1
	} else {
		x.Bit1 = ""
	}
	if ptrBit8 != nil {
		x.Bit8 = *ptrBit8
	} else {
		x.Bit8 = ""
	}
	if ptrBit64 != nil {
		x.Bit64 = *ptrBit64
	} else {
		x.Bit64 = ""
	}
	if ptrBoolField != nil {
		x.BoolField = *ptrBoolField
	} else {
		x.BoolField = ""
	}
	if ptrBooleanField != nil {
		x.BooleanField = *ptrBooleanField
	} else {
		x.BooleanField = ""
	}
	if ptrCharField != nil {
		x.CharField = *ptrCharField
	} else {
		x.CharField = ""
	}
	if ptrVarcharField != nil {
		x.VarcharField = *ptrVarcharField
	} else {
		x.VarcharField = ""
	}
	if ptrTextField != nil {
		x.TextField = *ptrTextField
	} else {
		x.TextField = ""
	}
	if ptrTinytextField != nil {
		x.TinytextField = *ptrTinytextField
	} else {
		x.TinytextField = ""
	}
	if ptrMediumtextField != nil {
		x.MediumtextField = *ptrMediumtextField
	} else {
		x.MediumtextField = ""
	}
	if ptrLongtextField != nil {
		x.LongtextField = *ptrLongtextField
	} else {
		x.LongtextField = ""
	}
	if ptrEnumField != nil {
		x.EnumField = *ptrEnumField
	} else {
		x.EnumField = ""
	}
	if ptrSetField != nil {
		x.SetField = *ptrSetField
	} else {
		x.SetField = ""
	}
	if ptrBinaryField != nil {
		x.BinaryField = *ptrBinaryField
	} else {
		x.BinaryField = ""
	}
	if ptrVarbinaryField != nil {
		x.VarbinaryField = *ptrVarbinaryField
	} else {
		x.VarbinaryField = ""
	}
	if ptrBlobField != nil {
		x.BlobField = *ptrBlobField
	} else {
		x.BlobField = ""
	}
	if ptrTinyblobField != nil {
		x.TinyblobField = *ptrTinyblobField
	} else {
		x.TinyblobField = ""
	}
	if ptrMediumblobField != nil {
		x.MediumblobField = *ptrMediumblobField
	} else {
		x.MediumblobField = ""
	}
	if ptrLongblobField != nil {
		x.LongblobField = *ptrLongblobField
	} else {
		x.LongblobField = ""
	}
	if ptrDateField != nil {
		x.DateField = *ptrDateField
	} else {
		x.DateField = ""
	}
	if ptrTimeField != nil {
		x.TimeField = *ptrTimeField
	} else {
		x.TimeField = ""
	}
	if ptrYearField != nil {
		x.YearField = *ptrYearField
	} else {
		x.YearField = ""
	}
	if ptrDatetimeField != nil {
		x.DatetimeField = *ptrDatetimeField
	} else {
		x.DatetimeField = ""
	}
	if ptrTimestampField != nil {
		x.TimestampField = *ptrTimestampField
	} else {
		x.TimestampField = ""
	}
	if ptrUuidField != nil {
		x.UuidField = *ptrUuidField
	} else {
		x.UuidField = ""
	}
	return x, nil
}

func readRows(fields []string, rows *sql.Rows) ([]*Entity, error) {
	defer rows.Close()
	var results []*Entity
	for rows.Next() {
		x, err := scanRow(fields, rows)
		if err != nil {
			return results, err
		}
		results = append(results, x)
	}
	return results, nil
}

func DBTruncate() (sql.Result, error) {
	query := "TRUNCATE TABLE " + FQTN
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.Exec()
}

func DBTruncateContext(ctx context.Context) (sql.Result, error) {
	query := "TRUNCATE TABLE " + FQTN
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.ExecContext(ctx)
}

func (x *Entity) DBInsert(fieldsToInsert []string) (sql.Result, error) {
	query := "INSERT INTO " + FQTN + " (" + strings.Join(GetBacktickedFields(fieldsToInsert), ", ") + ") VALUES (" + strings.Join(GetFieldPlaceholders(fieldsToInsert), ", ") + ")"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.Exec(x.GetFieldValues(fieldsToInsert)...)
}

func (x *Entity) DBInsertContext(ctx context.Context, fieldsToInsert []string) (sql.Result, error) {
	query := "INSERT INTO " + FQTN + " (" + strings.Join(GetBacktickedFields(fieldsToInsert), ", ") + ") VALUES (" + strings.Join(GetFieldPlaceholders(fieldsToInsert), ", ") + ")"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.ExecContext(ctx, x.GetFieldValues(fieldsToInsert)...)
}

func (x *Entity) DBDeleteWhereAll(fieldsToMatch []string) (sql.Result, error) {
	query := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.Exec(x.GetFieldValues(fieldsToMatch)...)
}

func (x *Entity) DBDeleteWhereAllContext(ctx context.Context, fieldsToMatch []string) (sql.Result, error) {
	query := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.ExecContext(ctx, x.GetFieldValues(fieldsToMatch)...)
}

func (x *Entity) DBDeleteWhereAny(fieldsToMatch []string) (sql.Result, error) {
	query := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.Exec(x.GetFieldValues(fieldsToMatch)...)
}

func (x *Entity) DBDeleteWhereAnyContext(ctx context.Context, fieldsToMatch []string) (sql.Result, error) {
	query := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.ExecContext(ctx, x.GetFieldValues(fieldsToMatch)...)
}

func (x *Entity) DBUpdateWhereAll(fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	query := "UPDATE " + FQTN + " SET " + strings.Join(GetFieldPlaceholdersWithName(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	values := append(x.GetFieldValues(fieldsToUpdate), x.GetFieldValues(fieldsToMatch)...)
	return stmt.Exec(values...)
}

func (x *Entity) DBUpdateWhereAllContext(ctx context.Context, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	query := "UPDATE " + FQTN + " SET " + strings.Join(GetFieldPlaceholdersWithName(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	values := append(x.GetFieldValues(fieldsToUpdate), x.GetFieldValues(fieldsToMatch)...)
	return stmt.ExecContext(ctx, values...)
}

func (x *Entity) DBUpdateWhereAny(fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	query := "UPDATE " + FQTN + " SET " + strings.Join(GetFieldPlaceholdersWithName(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	values := append(x.GetFieldValues(fieldsToUpdate), x.GetFieldValues(fieldsToMatch)...)
	return stmt.Exec(values...)
}

func (x *Entity) DBUpdateWhereAnyContext(ctx context.Context, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	query := "UPDATE " + FQTN + " SET " + strings.Join(GetFieldPlaceholdersWithName(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	values := append(x.GetFieldValues(fieldsToUpdate), x.GetFieldValues(fieldsToMatch)...)
	return stmt.ExecContext(ctx, values...)
}

func DBSelectAll() ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func DBSelectAllContext(ctx context.Context) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func DBSelectAllWithFields(fields []string) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(fields), ", ") + " FROM " + FQTN
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(fields, rows)
}

func DBSelectAllWithFieldsContext(ctx context.Context, fields []string) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(fields), ", ") + " FROM " + FQTN
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(fields, rows)
}

func DBSubquerySelectAll(subquery string, args ...any) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN + " " + subquery
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query(args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func DBSubquerySelectAllContext(ctx context.Context, subquery string, args ...any) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN + " " + subquery
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func (x *Entity) DBSelectAllWhereAll(fieldsToMatch []string) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query(x.GetFieldValues(fieldsToMatch)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func (x *Entity) DBSelectAllWhereAllContext(ctx context.Context, fieldsToMatch []string) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx, x.GetFieldValues(fieldsToMatch)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func (x *Entity) DBSelectAllWhereAny(fieldsToMatch []string) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query(x.GetFieldValues(fieldsToMatch)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func (x *Entity) DBSelectAllWhereAnyContext(ctx context.Context, fieldsToMatch []string) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx, x.GetFieldValues(fieldsToMatch)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func (x *Entity) DBExists(fields []string) (bool, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") +
		" FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fields), " = ? AND ") + " = ? LIMIT 1"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return false, err
	}
	rows, err := stmt.Query(x.GetFieldValues(fields)...)
	if err != nil {
		return false, err
	}
	defer rows.Close()
	results, err := readRows(Fields, rows)
	if err != nil {
		return false, err
	}
	if len(results) == 0 {
		return false, nil
	}
	*x = *results[0]
	return true, nil
}

func (x *Entity) DBExistsContext(ctx context.Context, fields []string) (bool, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") +
		" FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fields), " = ? AND ") + " = ? LIMIT 1"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return false, err
	}
	rows, err := stmt.QueryContext(ctx, x.GetFieldValues(fields)...)
	if err != nil {
		return false, err
	}
	defer rows.Close()
	results, err := readRows(Fields, rows)
	if err != nil {
		return false, err
	}
	if len(results) == 0 {
		return false, nil
	}
	*x = *results[0]
	return true, nil
}

func (x *Entity) DBCountWhereAll(fields []string) (int, error) {
	query := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fields), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return 0, err
	}
	var count int
	err = stmt.QueryRow(x.GetFieldValues(fields)...).Scan(&count)
	return count, err
}

func (x *Entity) DBCountWhereAllContext(ctx context.Context, fields []string) (int, error) {
	query := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fields), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return 0, err
	}
	var count int
	err = stmt.QueryRowContext(ctx, x.GetFieldValues(fields)...).Scan(&count)
	return count, err
}

func (x *Entity) DBCountWhereAny(fields []string) (int, error) {
	query := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fields), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return 0, err
	}
	var count int
	err = stmt.QueryRow(x.GetFieldValues(fields)...).Scan(&count)
	return count, err
}

func (x *Entity) DBCountWhereAnyContext(ctx context.Context, fields []string) (int, error) {
	query := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fields), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return 0, err
	}
	var count int
	err = stmt.QueryRowContext(ctx, x.GetFieldValues(fields)...).Scan(&count)
	return count, err
}

func (x *Entity) DBFindOrCreate(fields []string) error {
	exists, err := x.DBExists(fields)
	if err != nil {
		return err
	}
	if exists {
		return nil
	}
	_, err = x.DBInsert(fields)
	if err != nil {
		return err
	}
	_, err = x.DBExists(fields)
	if err != nil {
		return err
	}
	return nil
}

func (x *Entity) DBFindOrCreateContext(ctx context.Context, fields []string) error {
	exists, err := x.DBExistsContext(ctx, fields)
	if err != nil {
		return err
	}
	if exists {
		return nil
	}
	_, err = x.DBInsertContext(ctx, fields)
	if err != nil {
		return err
	}
	_, err = x.DBExistsContext(ctx, fields)
	if err != nil {
		return err
	}
	return nil
}

func (x *Entity) DBSubquerySelectAllWhereAll(fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE (" + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? AND ") + " = ?) " + subquery
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	allArgs := append(x.GetFieldValues(fieldsToMatch), args...)
	rows, err := stmt.Query(allArgs...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func (x *Entity) DBSubquerySelectAllWhereAllContext(ctx context.Context, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE (" + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? AND ") + " = ?) " + subquery
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	allArgs := append(x.GetFieldValues(fieldsToMatch), args...)
	rows, err := stmt.QueryContext(ctx, allArgs...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func (x *Entity) DBSubquerySelectAllWhereAny(fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE (" + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? OR ") + " = ?) " + subquery
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	allArgs := append(x.GetFieldValues(fieldsToMatch), args...)
	rows, err := stmt.Query(allArgs...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func (x *Entity) DBSubquerySelectAllWhereAnyContext(ctx context.Context, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE (" + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? OR ") + " = ?) " + subquery
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	allArgs := append(x.GetFieldValues(fieldsToMatch), args...)
	rows, err := stmt.QueryContext(ctx, allArgs...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}
