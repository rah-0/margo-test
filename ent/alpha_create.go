// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rah-0/margo-test/ent/alpha"
)

// AlphaCreate is the builder for creating a Alpha entity.
type AlphaCreate struct {
	config
	mutation *AlphaMutation
	hooks    []Hook
}

// SetUUID sets the "Uuid" field.
func (ac *AlphaCreate) SetUUID(s string) *AlphaCreate {
	ac.mutation.SetUUID(s)
	return ac
}

// SetFirstInsert sets the "FirstInsert" field.
func (ac *AlphaCreate) SetFirstInsert(s string) *AlphaCreate {
	ac.mutation.SetFirstInsert(s)
	return ac
}

// SetLastUpdate sets the "LastUpdate" field.
func (ac *AlphaCreate) SetLastUpdate(s string) *AlphaCreate {
	ac.mutation.SetLastUpdate(s)
	return ac
}

// SetAnimal sets the "Animal" field.
func (ac *AlphaCreate) SetAnimal(s string) *AlphaCreate {
	ac.mutation.SetAnimal(s)
	return ac
}

// SetBigNumber sets the "BigNumber" field.
func (ac *AlphaCreate) SetBigNumber(s string) *AlphaCreate {
	ac.mutation.SetBigNumber(s)
	return ac
}

// SetTestField sets the "TestField" field.
func (ac *AlphaCreate) SetTestField(s string) *AlphaCreate {
	ac.mutation.SetTestField(s)
	return ac
}

// SetNillableTestField sets the "TestField" field if the given value is not nil.
func (ac *AlphaCreate) SetNillableTestField(s *string) *AlphaCreate {
	if s != nil {
		ac.SetTestField(*s)
	}
	return ac
}

// Mutation returns the AlphaMutation object of the builder.
func (ac *AlphaCreate) Mutation() *AlphaMutation {
	return ac.mutation
}

// Save creates the Alpha in the database.
func (ac *AlphaCreate) Save(ctx context.Context) (*Alpha, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AlphaCreate) SaveX(ctx context.Context) *Alpha {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AlphaCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AlphaCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AlphaCreate) check() error {
	if _, ok := ac.mutation.UUID(); !ok {
		return &ValidationError{Name: "Uuid", err: errors.New(`ent: missing required field "Alpha.Uuid"`)}
	}
	if v, ok := ac.mutation.UUID(); ok {
		if err := alpha.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "Uuid", err: fmt.Errorf(`ent: validator failed for field "Alpha.Uuid": %w`, err)}
		}
	}
	if _, ok := ac.mutation.FirstInsert(); !ok {
		return &ValidationError{Name: "FirstInsert", err: errors.New(`ent: missing required field "Alpha.FirstInsert"`)}
	}
	if _, ok := ac.mutation.LastUpdate(); !ok {
		return &ValidationError{Name: "LastUpdate", err: errors.New(`ent: missing required field "Alpha.LastUpdate"`)}
	}
	if _, ok := ac.mutation.Animal(); !ok {
		return &ValidationError{Name: "Animal", err: errors.New(`ent: missing required field "Alpha.Animal"`)}
	}
	if v, ok := ac.mutation.Animal(); ok {
		if err := alpha.AnimalValidator(v); err != nil {
			return &ValidationError{Name: "Animal", err: fmt.Errorf(`ent: validator failed for field "Alpha.Animal": %w`, err)}
		}
	}
	if _, ok := ac.mutation.BigNumber(); !ok {
		return &ValidationError{Name: "BigNumber", err: errors.New(`ent: missing required field "Alpha.BigNumber"`)}
	}
	return nil
}

func (ac *AlphaCreate) sqlSave(ctx context.Context) (*Alpha, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AlphaCreate) createSpec() (*Alpha, *sqlgraph.CreateSpec) {
	var (
		_node = &Alpha{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(alpha.Table, sqlgraph.NewFieldSpec(alpha.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.UUID(); ok {
		_spec.SetField(alpha.FieldUUID, field.TypeString, value)
		_node.UUID = value
	}
	if value, ok := ac.mutation.FirstInsert(); ok {
		_spec.SetField(alpha.FieldFirstInsert, field.TypeString, value)
		_node.FirstInsert = value
	}
	if value, ok := ac.mutation.LastUpdate(); ok {
		_spec.SetField(alpha.FieldLastUpdate, field.TypeString, value)
		_node.LastUpdate = value
	}
	if value, ok := ac.mutation.Animal(); ok {
		_spec.SetField(alpha.FieldAnimal, field.TypeString, value)
		_node.Animal = value
	}
	if value, ok := ac.mutation.BigNumber(); ok {
		_spec.SetField(alpha.FieldBigNumber, field.TypeString, value)
		_node.BigNumber = value
	}
	if value, ok := ac.mutation.TestField(); ok {
		_spec.SetField(alpha.FieldTestField, field.TypeString, value)
		_node.TestField = value
	}
	return _node, _spec
}

// AlphaCreateBulk is the builder for creating many Alpha entities in bulk.
type AlphaCreateBulk struct {
	config
	err      error
	builders []*AlphaCreate
}

// Save creates the Alpha entities in the database.
func (acb *AlphaCreateBulk) Save(ctx context.Context) ([]*Alpha, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Alpha, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AlphaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AlphaCreateBulk) SaveX(ctx context.Context) []*Alpha {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AlphaCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AlphaCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
