// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rah-0/margo-test/ent/alpha"
	"github.com/rah-0/margo-test/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAlpha = "Alpha"
)

// AlphaMutation represents an operation that mutates the Alpha nodes in the graph.
type AlphaMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Uuid         *string
	_FirstInsert  *string
	_LastUpdate   *string
	_Animal       *string
	_BigNumber    *string
	_TestField    *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Alpha, error)
	predicates    []predicate.Alpha
}

var _ ent.Mutation = (*AlphaMutation)(nil)

// alphaOption allows management of the mutation configuration using functional options.
type alphaOption func(*AlphaMutation)

// newAlphaMutation creates new mutation for the Alpha entity.
func newAlphaMutation(c config, op Op, opts ...alphaOption) *AlphaMutation {
	m := &AlphaMutation{
		config:        c,
		op:            op,
		typ:           TypeAlpha,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAlphaID sets the ID field of the mutation.
func withAlphaID(id int) alphaOption {
	return func(m *AlphaMutation) {
		var (
			err   error
			once  sync.Once
			value *Alpha
		)
		m.oldValue = func(ctx context.Context) (*Alpha, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Alpha.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAlpha sets the old Alpha of the mutation.
func withAlpha(node *Alpha) alphaOption {
	return func(m *AlphaMutation) {
		m.oldValue = func(context.Context) (*Alpha, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AlphaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AlphaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AlphaMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AlphaMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Alpha.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUUID sets the "Uuid" field.
func (m *AlphaMutation) SetUUID(s string) {
	m._Uuid = &s
}

// UUID returns the value of the "Uuid" field in the mutation.
func (m *AlphaMutation) UUID() (r string, exists bool) {
	v := m._Uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "Uuid" field's value of the Alpha entity.
// If the Alpha object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlphaMutation) OldUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "Uuid" field.
func (m *AlphaMutation) ResetUUID() {
	m._Uuid = nil
}

// SetFirstInsert sets the "FirstInsert" field.
func (m *AlphaMutation) SetFirstInsert(s string) {
	m._FirstInsert = &s
}

// FirstInsert returns the value of the "FirstInsert" field in the mutation.
func (m *AlphaMutation) FirstInsert() (r string, exists bool) {
	v := m._FirstInsert
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstInsert returns the old "FirstInsert" field's value of the Alpha entity.
// If the Alpha object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlphaMutation) OldFirstInsert(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstInsert is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstInsert requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstInsert: %w", err)
	}
	return oldValue.FirstInsert, nil
}

// ResetFirstInsert resets all changes to the "FirstInsert" field.
func (m *AlphaMutation) ResetFirstInsert() {
	m._FirstInsert = nil
}

// SetLastUpdate sets the "LastUpdate" field.
func (m *AlphaMutation) SetLastUpdate(s string) {
	m._LastUpdate = &s
}

// LastUpdate returns the value of the "LastUpdate" field in the mutation.
func (m *AlphaMutation) LastUpdate() (r string, exists bool) {
	v := m._LastUpdate
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUpdate returns the old "LastUpdate" field's value of the Alpha entity.
// If the Alpha object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlphaMutation) OldLastUpdate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUpdate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUpdate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUpdate: %w", err)
	}
	return oldValue.LastUpdate, nil
}

// ResetLastUpdate resets all changes to the "LastUpdate" field.
func (m *AlphaMutation) ResetLastUpdate() {
	m._LastUpdate = nil
}

// SetAnimal sets the "Animal" field.
func (m *AlphaMutation) SetAnimal(s string) {
	m._Animal = &s
}

// Animal returns the value of the "Animal" field in the mutation.
func (m *AlphaMutation) Animal() (r string, exists bool) {
	v := m._Animal
	if v == nil {
		return
	}
	return *v, true
}

// OldAnimal returns the old "Animal" field's value of the Alpha entity.
// If the Alpha object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlphaMutation) OldAnimal(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnimal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnimal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnimal: %w", err)
	}
	return oldValue.Animal, nil
}

// ResetAnimal resets all changes to the "Animal" field.
func (m *AlphaMutation) ResetAnimal() {
	m._Animal = nil
}

// SetBigNumber sets the "BigNumber" field.
func (m *AlphaMutation) SetBigNumber(s string) {
	m._BigNumber = &s
}

// BigNumber returns the value of the "BigNumber" field in the mutation.
func (m *AlphaMutation) BigNumber() (r string, exists bool) {
	v := m._BigNumber
	if v == nil {
		return
	}
	return *v, true
}

// OldBigNumber returns the old "BigNumber" field's value of the Alpha entity.
// If the Alpha object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlphaMutation) OldBigNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBigNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBigNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBigNumber: %w", err)
	}
	return oldValue.BigNumber, nil
}

// ResetBigNumber resets all changes to the "BigNumber" field.
func (m *AlphaMutation) ResetBigNumber() {
	m._BigNumber = nil
}

// SetTestField sets the "TestField" field.
func (m *AlphaMutation) SetTestField(s string) {
	m._TestField = &s
}

// TestField returns the value of the "TestField" field in the mutation.
func (m *AlphaMutation) TestField() (r string, exists bool) {
	v := m._TestField
	if v == nil {
		return
	}
	return *v, true
}

// OldTestField returns the old "TestField" field's value of the Alpha entity.
// If the Alpha object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlphaMutation) OldTestField(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTestField is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTestField requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTestField: %w", err)
	}
	return oldValue.TestField, nil
}

// ClearTestField clears the value of the "TestField" field.
func (m *AlphaMutation) ClearTestField() {
	m._TestField = nil
	m.clearedFields[alpha.FieldTestField] = struct{}{}
}

// TestFieldCleared returns if the "TestField" field was cleared in this mutation.
func (m *AlphaMutation) TestFieldCleared() bool {
	_, ok := m.clearedFields[alpha.FieldTestField]
	return ok
}

// ResetTestField resets all changes to the "TestField" field.
func (m *AlphaMutation) ResetTestField() {
	m._TestField = nil
	delete(m.clearedFields, alpha.FieldTestField)
}

// Where appends a list predicates to the AlphaMutation builder.
func (m *AlphaMutation) Where(ps ...predicate.Alpha) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AlphaMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AlphaMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Alpha, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AlphaMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AlphaMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Alpha).
func (m *AlphaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AlphaMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m._Uuid != nil {
		fields = append(fields, alpha.FieldUUID)
	}
	if m._FirstInsert != nil {
		fields = append(fields, alpha.FieldFirstInsert)
	}
	if m._LastUpdate != nil {
		fields = append(fields, alpha.FieldLastUpdate)
	}
	if m._Animal != nil {
		fields = append(fields, alpha.FieldAnimal)
	}
	if m._BigNumber != nil {
		fields = append(fields, alpha.FieldBigNumber)
	}
	if m._TestField != nil {
		fields = append(fields, alpha.FieldTestField)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AlphaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case alpha.FieldUUID:
		return m.UUID()
	case alpha.FieldFirstInsert:
		return m.FirstInsert()
	case alpha.FieldLastUpdate:
		return m.LastUpdate()
	case alpha.FieldAnimal:
		return m.Animal()
	case alpha.FieldBigNumber:
		return m.BigNumber()
	case alpha.FieldTestField:
		return m.TestField()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AlphaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case alpha.FieldUUID:
		return m.OldUUID(ctx)
	case alpha.FieldFirstInsert:
		return m.OldFirstInsert(ctx)
	case alpha.FieldLastUpdate:
		return m.OldLastUpdate(ctx)
	case alpha.FieldAnimal:
		return m.OldAnimal(ctx)
	case alpha.FieldBigNumber:
		return m.OldBigNumber(ctx)
	case alpha.FieldTestField:
		return m.OldTestField(ctx)
	}
	return nil, fmt.Errorf("unknown Alpha field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlphaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case alpha.FieldUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case alpha.FieldFirstInsert:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstInsert(v)
		return nil
	case alpha.FieldLastUpdate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUpdate(v)
		return nil
	case alpha.FieldAnimal:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnimal(v)
		return nil
	case alpha.FieldBigNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBigNumber(v)
		return nil
	case alpha.FieldTestField:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTestField(v)
		return nil
	}
	return fmt.Errorf("unknown Alpha field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AlphaMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AlphaMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlphaMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Alpha numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AlphaMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(alpha.FieldTestField) {
		fields = append(fields, alpha.FieldTestField)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AlphaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AlphaMutation) ClearField(name string) error {
	switch name {
	case alpha.FieldTestField:
		m.ClearTestField()
		return nil
	}
	return fmt.Errorf("unknown Alpha nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AlphaMutation) ResetField(name string) error {
	switch name {
	case alpha.FieldUUID:
		m.ResetUUID()
		return nil
	case alpha.FieldFirstInsert:
		m.ResetFirstInsert()
		return nil
	case alpha.FieldLastUpdate:
		m.ResetLastUpdate()
		return nil
	case alpha.FieldAnimal:
		m.ResetAnimal()
		return nil
	case alpha.FieldBigNumber:
		m.ResetBigNumber()
		return nil
	case alpha.FieldTestField:
		m.ResetTestField()
		return nil
	}
	return fmt.Errorf("unknown Alpha field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AlphaMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AlphaMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AlphaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AlphaMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AlphaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AlphaMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AlphaMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Alpha unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AlphaMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Alpha edge %s", name)
}
