package Template

// ---------------------------------------------------------------
// The code in this file is autogenerated, do not modify manually!
// ---------------------------------------------------------------

import (
	"context"
	"database/sql"
	"encoding/base64"
	"sync"
)

var (
	db        *sql.DB
	stmtMu    sync.RWMutex
	stmtCache = make(map[string]*sql.Stmt)
	queries   = map[string]*NamedQuery{
		"GetAllAnimals":       {QueryEncoded: "U0VMRUNUIGBBbmltYWxgLCBgQmlnTnVtYmVyYApGUk9NIGBhbHBoYWA="},
		"GetRecentCats":       {QueryEncoded: "U0VMRUNUIGBVdWlkYCwgYExhc3RVcGRhdGVgCkZST00gYGFscGhhYApXSEVSRSBgQW5pbWFsYCA9ICdjYXQnIEFORCBgTGFzdFVwZGF0ZWAgPiAnMjAyNC0wMS0wMSAwMDowMDowMC4wMDAwMDAn"},
		"GetByUuid":           {QueryEncoded: "U0VMRUNUIGBBbmltYWxgLCBgdGVzdF9maWVsZGAKRlJPTSBgYWxwaGFgCldIRVJFIGBVdWlkYCA9ID8="},
		"CountNullBigNumbers": {QueryEncoded: "U0VMRUNUIENPVU5UKCopIEFTIGBjb3VudGAKRlJPTSBgYWxwaGFgCldIRVJFIGBCaWdOdW1iZXJgIElTIE5VTEw="},
		"InsertOne":           {QueryEncoded: "SU5TRVJUIElOVE8gYGFscGhhYCAoYFV1aWRgLCBgQW5pbWFsYCwgYHRlc3RfZmllbGRgKQpWQUxVRVMgKD8sID8sID8p"},
		"InsertHardcoded":     {QueryEncoded: "SU5TRVJUIElOVE8gYGFscGhhYCAoYFV1aWRgLCBgQW5pbWFsYCkKVkFMVUVTICgnMTExMTExMTEtMTExMS00MTExLTgxMTEtMTExMTExMTExMTExJywgJ2RvZycp"},
		"UpdateAnimalName":    {QueryEncoded: "VVBEQVRFIGBhbHBoYWAKU0VUIGBBbmltYWxgID0gPwpXSEVSRSBgVXVpZGAgPSA/"},
		"UpdateTestField":     {QueryEncoded: "VVBEQVRFIGBhbHBoYWAKU0VUIGB0ZXN0X2ZpZWxkYCA9ICd1cGRhdGVkJwpXSEVSRSBgQW5pbWFsYCA9ICdmb3gn"},
		"DeleteByUuid":        {QueryEncoded: "REVMRVRFIEZST00gYGFscGhhYCBXSEVSRSBgVXVpZGAgPSA/"},
		"DeleteOldRows":       {QueryEncoded: "REVMRVRFIEZST00gYGFscGhhYCBXSEVSRSBgTGFzdFVwZGF0ZWAgPCAnMjAyMy0wMS0wMSAwMDowMDowMC4wMDAwMDAn"},
	}
)

type NamedQuery struct {
	Name         string
	Query        string
	QueryEncoded string
}

func SetDB(x *sql.DB) error {
	db = x

	for _, q := range queries {
		b, err := base64.StdEncoding.DecodeString(q.QueryEncoded)
		if err != nil {
			return err
		}
		q.Query = string(b)
	}

	return nil
}

func getPreparedStmt(query string) (*sql.Stmt, error) {
	stmtMu.RLock()
	if stmt, ok := stmtCache[query]; ok {
		stmtMu.RUnlock()
		return stmt, nil
	}
	stmtMu.RUnlock()

	stmtMu.Lock()
	defer stmtMu.Unlock()
	if stmt, ok := stmtCache[query]; ok {
		return stmt, nil
	}
	stmt, err := db.Prepare(query)
	if err != nil {
		return nil, err
	}
	stmtCache[query] = stmt
	return stmt, nil
}

type QueryGetAllAnimalsResult struct {
	Animal    string
	BigNumber string
}

func QueryGetAllAnimals() ([]QueryGetAllAnimalsResult, error) {
	q := queries["GetAllAnimals"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var results []QueryGetAllAnimalsResult
	for rows.Next() {
		var ptrAnimal *string
		var ptrBigNumber *string
		err := rows.Scan(&ptrAnimal, &ptrBigNumber)
		if err != nil {
			return results, err
		}
		x := QueryGetAllAnimalsResult{}
		if ptrAnimal != nil {
			x.Animal = *ptrAnimal
		} else {
			x.Animal = ""
		}
		if ptrBigNumber != nil {
			x.BigNumber = *ptrBigNumber
		} else {
			x.BigNumber = ""
		}
		results = append(results, x)
	}
	return results, nil
}

func QueryGetAllAnimalsContext(ctx context.Context) ([]QueryGetAllAnimalsResult, error) {
	q := queries["GetAllAnimals"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var results []QueryGetAllAnimalsResult
	for rows.Next() {
		var ptrAnimal *string
		var ptrBigNumber *string
		err := rows.Scan(&ptrAnimal, &ptrBigNumber)
		if err != nil {
			return results, err
		}
		x := QueryGetAllAnimalsResult{}
		if ptrAnimal != nil {
			x.Animal = *ptrAnimal
		} else {
			x.Animal = ""
		}
		if ptrBigNumber != nil {
			x.BigNumber = *ptrBigNumber
		} else {
			x.BigNumber = ""
		}
		results = append(results, x)
	}
	return results, nil
}

type QueryGetRecentCatsResult struct {
	Uuid       string
	LastUpdate string
}

func QueryGetRecentCats() ([]QueryGetRecentCatsResult, error) {
	q := queries["GetRecentCats"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var results []QueryGetRecentCatsResult
	for rows.Next() {
		var ptrUuid *string
		var ptrLastUpdate *string
		err := rows.Scan(&ptrUuid, &ptrLastUpdate)
		if err != nil {
			return results, err
		}
		x := QueryGetRecentCatsResult{}
		if ptrUuid != nil {
			x.Uuid = *ptrUuid
		} else {
			x.Uuid = ""
		}
		if ptrLastUpdate != nil {
			x.LastUpdate = *ptrLastUpdate
		} else {
			x.LastUpdate = ""
		}
		results = append(results, x)
	}
	return results, nil
}

func QueryGetRecentCatsContext(ctx context.Context) ([]QueryGetRecentCatsResult, error) {
	q := queries["GetRecentCats"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var results []QueryGetRecentCatsResult
	for rows.Next() {
		var ptrUuid *string
		var ptrLastUpdate *string
		err := rows.Scan(&ptrUuid, &ptrLastUpdate)
		if err != nil {
			return results, err
		}
		x := QueryGetRecentCatsResult{}
		if ptrUuid != nil {
			x.Uuid = *ptrUuid
		} else {
			x.Uuid = ""
		}
		if ptrLastUpdate != nil {
			x.LastUpdate = *ptrLastUpdate
		} else {
			x.LastUpdate = ""
		}
		results = append(results, x)
	}
	return results, nil
}

type QueryGetByUuidResult struct {
	Animal    string
	TestField string
}

func QueryGetByUuid(args ...any) ([]QueryGetByUuidResult, error) {
	q := queries["GetByUuid"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query(args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var results []QueryGetByUuidResult
	for rows.Next() {
		var ptrAnimal *string
		var ptrTestField *string
		err := rows.Scan(&ptrAnimal, &ptrTestField)
		if err != nil {
			return results, err
		}
		x := QueryGetByUuidResult{}
		if ptrAnimal != nil {
			x.Animal = *ptrAnimal
		} else {
			x.Animal = ""
		}
		if ptrTestField != nil {
			x.TestField = *ptrTestField
		} else {
			x.TestField = ""
		}
		results = append(results, x)
	}
	return results, nil
}

func QueryGetByUuidContext(ctx context.Context, args ...any) ([]QueryGetByUuidResult, error) {
	q := queries["GetByUuid"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var results []QueryGetByUuidResult
	for rows.Next() {
		var ptrAnimal *string
		var ptrTestField *string
		err := rows.Scan(&ptrAnimal, &ptrTestField)
		if err != nil {
			return results, err
		}
		x := QueryGetByUuidResult{}
		if ptrAnimal != nil {
			x.Animal = *ptrAnimal
		} else {
			x.Animal = ""
		}
		if ptrTestField != nil {
			x.TestField = *ptrTestField
		} else {
			x.TestField = ""
		}
		results = append(results, x)
	}
	return results, nil
}

type QueryCountNullBigNumbersResult struct {
	Count string
}

func QueryCountNullBigNumbers() ([]QueryCountNullBigNumbersResult, error) {
	q := queries["CountNullBigNumbers"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var results []QueryCountNullBigNumbersResult
	for rows.Next() {
		var ptrCount *string
		err := rows.Scan(&ptrCount)
		if err != nil {
			return results, err
		}
		x := QueryCountNullBigNumbersResult{}
		if ptrCount != nil {
			x.Count = *ptrCount
		} else {
			x.Count = ""
		}
		results = append(results, x)
	}
	return results, nil
}

func QueryCountNullBigNumbersContext(ctx context.Context) ([]QueryCountNullBigNumbersResult, error) {
	q := queries["CountNullBigNumbers"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var results []QueryCountNullBigNumbersResult
	for rows.Next() {
		var ptrCount *string
		err := rows.Scan(&ptrCount)
		if err != nil {
			return results, err
		}
		x := QueryCountNullBigNumbersResult{}
		if ptrCount != nil {
			x.Count = *ptrCount
		} else {
			x.Count = ""
		}
		results = append(results, x)
	}
	return results, nil
}

func QueryInsertOne(args ...any) (*sql.Rows, error) {
	q := queries["InsertOne"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query(args...)
	if err != nil {
		return nil, err
	}
	return rows, nil
}

func QueryInsertOneContext(ctx context.Context, args ...any) (*sql.Rows, error) {
	q := queries["InsertOne"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	return rows, nil
}

func QueryInsertHardcoded() (*sql.Rows, error) {
	q := queries["InsertHardcoded"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query()
	if err != nil {
		return nil, err
	}
	return rows, nil
}

func QueryInsertHardcodedContext(ctx context.Context) (*sql.Rows, error) {
	q := queries["InsertHardcoded"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx)
	if err != nil {
		return nil, err
	}
	return rows, nil
}

func QueryUpdateAnimalName(args ...any) (*sql.Rows, error) {
	q := queries["UpdateAnimalName"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query(args...)
	if err != nil {
		return nil, err
	}
	return rows, nil
}

func QueryUpdateAnimalNameContext(ctx context.Context, args ...any) (*sql.Rows, error) {
	q := queries["UpdateAnimalName"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	return rows, nil
}

func QueryUpdateTestField() (*sql.Rows, error) {
	q := queries["UpdateTestField"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query()
	if err != nil {
		return nil, err
	}
	return rows, nil
}

func QueryUpdateTestFieldContext(ctx context.Context) (*sql.Rows, error) {
	q := queries["UpdateTestField"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx)
	if err != nil {
		return nil, err
	}
	return rows, nil
}

func QueryDeleteByUuid(args ...any) (*sql.Rows, error) {
	q := queries["DeleteByUuid"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query(args...)
	if err != nil {
		return nil, err
	}
	return rows, nil
}

func QueryDeleteByUuidContext(ctx context.Context, args ...any) (*sql.Rows, error) {
	q := queries["DeleteByUuid"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	return rows, nil
}

func QueryDeleteOldRows() (*sql.Rows, error) {
	q := queries["DeleteOldRows"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query()
	if err != nil {
		return nil, err
	}
	return rows, nil
}

func QueryDeleteOldRowsContext(ctx context.Context) (*sql.Rows, error) {
	q := queries["DeleteOldRows"]
	stmt, err := getPreparedStmt(q.Query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx)
	if err != nil {
		return nil, err
	}
	return rows, nil
}
