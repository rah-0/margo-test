package AllTypes

// ---------------------------------------------------------------
// The code in this file is autogenerated, do not modify manually!
// ---------------------------------------------------------------

import (
	"context"
	"database/sql"
	"strings"
	"sync"
)

const (
	FQTN                 = "`template`.`all_types`"
	FieldId              = "id"
	FieldTinySigned      = "tiny_signed"
	FieldTinyUnsigned    = "tiny_unsigned"
	FieldSmallSigned     = "small_signed"
	FieldSmallUnsigned   = "small_unsigned"
	FieldMediumSigned    = "medium_signed"
	FieldMediumUnsigned  = "medium_unsigned"
	FieldIntSigned       = "int_signed"
	FieldIntUnsigned     = "int_unsigned"
	FieldBigSigned       = "big_signed"
	FieldBigUnsigned     = "big_unsigned"
	FieldFloatField      = "float_field"
	FieldDoubleField     = "double_field"
	FieldRealField       = "real_field"
	FieldDecimalField    = "decimal_field"
	FieldDecField        = "dec_field"
	FieldNumericField    = "numeric_field"
	FieldFixedField      = "fixed_field"
	FieldBit1            = "bit1"
	FieldBit8            = "bit8"
	FieldBit64           = "bit64"
	FieldBoolField       = "bool_field"
	FieldBooleanField    = "boolean_field"
	FieldCharField       = "char_field"
	FieldVarcharField    = "varchar_field"
	FieldTextField       = "text_field"
	FieldTinytextField   = "tinytext_field"
	FieldMediumtextField = "mediumtext_field"
	FieldLongtextField   = "longtext_field"
	FieldEnumField       = "enum_field"
	FieldSetField        = "set_field"
	FieldBinaryField     = "binary_field"
	FieldVarbinaryField  = "varbinary_field"
	FieldBlobField       = "blob_field"
	FieldTinyblobField   = "tinyblob_field"
	FieldMediumblobField = "mediumblob_field"
	FieldLongblobField   = "longblob_field"
	FieldDateField       = "date_field"
	FieldTimeField       = "time_field"
	FieldYearField       = "year_field"
	FieldDatetimeField   = "datetime_field"
	FieldTimestampField  = "timestamp_field"
	FieldUuidField       = "uuid_field"
)

var (
	Fields    = []string{FieldId, FieldTinySigned, FieldTinyUnsigned, FieldSmallSigned, FieldSmallUnsigned, FieldMediumSigned, FieldMediumUnsigned, FieldIntSigned, FieldIntUnsigned, FieldBigSigned, FieldBigUnsigned, FieldFloatField, FieldDoubleField, FieldRealField, FieldDecimalField, FieldDecField, FieldNumericField, FieldFixedField, FieldBit1, FieldBit8, FieldBit64, FieldBoolField, FieldBooleanField, FieldCharField, FieldVarcharField, FieldTextField, FieldTinytextField, FieldMediumtextField, FieldLongtextField, FieldEnumField, FieldSetField, FieldBinaryField, FieldVarbinaryField, FieldBlobField, FieldTinyblobField, FieldMediumblobField, FieldLongblobField, FieldDateField, FieldTimeField, FieldYearField, FieldDatetimeField, FieldTimestampField, FieldUuidField}
	db        *sql.DB
	stmtMu    sync.RWMutex
	stmtCache = make(map[string]*sql.Stmt)
)

type Entity struct {
	Id              string
	TinySigned      string
	TinyUnsigned    string
	SmallSigned     string
	SmallUnsigned   string
	MediumSigned    string
	MediumUnsigned  string
	IntSigned       string
	IntUnsigned     string
	BigSigned       string
	BigUnsigned     string
	FloatField      string
	DoubleField     string
	RealField       string
	DecimalField    string
	DecField        string
	NumericField    string
	FixedField      string
	Bit1            string
	Bit8            string
	Bit64           string
	BoolField       string
	BooleanField    string
	CharField       string
	VarcharField    string
	TextField       string
	TinytextField   string
	MediumtextField string
	LongtextField   string
	EnumField       string
	SetField        string
	BinaryField     string
	VarbinaryField  string
	BlobField       string
	TinyblobField   string
	MediumblobField string
	LongblobField   string
	DateField       string
	TimeField       string
	YearField       string
	DatetimeField   string
	TimestampField  string
	UuidField       string
}

func SetDB(x *sql.DB) {
	db = x
}

func (x *Entity) GetFieldValues(fieldList []string) []any {
	values := make([]any, 0, len(fieldList))

	for _, field := range fieldList {
		switch field {
		case FieldId:
			values = append(values, x.Id)
		case FieldTinySigned:
			values = append(values, x.TinySigned)
		case FieldTinyUnsigned:
			values = append(values, x.TinyUnsigned)
		case FieldSmallSigned:
			values = append(values, x.SmallSigned)
		case FieldSmallUnsigned:
			values = append(values, x.SmallUnsigned)
		case FieldMediumSigned:
			values = append(values, x.MediumSigned)
		case FieldMediumUnsigned:
			values = append(values, x.MediumUnsigned)
		case FieldIntSigned:
			values = append(values, x.IntSigned)
		case FieldIntUnsigned:
			values = append(values, x.IntUnsigned)
		case FieldBigSigned:
			values = append(values, x.BigSigned)
		case FieldBigUnsigned:
			values = append(values, x.BigUnsigned)
		case FieldFloatField:
			values = append(values, x.FloatField)
		case FieldDoubleField:
			values = append(values, x.DoubleField)
		case FieldRealField:
			values = append(values, x.RealField)
		case FieldDecimalField:
			values = append(values, x.DecimalField)
		case FieldDecField:
			values = append(values, x.DecField)
		case FieldNumericField:
			values = append(values, x.NumericField)
		case FieldFixedField:
			values = append(values, x.FixedField)
		case FieldBit1:
			values = append(values, x.Bit1)
		case FieldBit8:
			values = append(values, x.Bit8)
		case FieldBit64:
			values = append(values, x.Bit64)
		case FieldBoolField:
			values = append(values, x.BoolField)
		case FieldBooleanField:
			values = append(values, x.BooleanField)
		case FieldCharField:
			values = append(values, x.CharField)
		case FieldVarcharField:
			values = append(values, x.VarcharField)
		case FieldTextField:
			values = append(values, x.TextField)
		case FieldTinytextField:
			values = append(values, x.TinytextField)
		case FieldMediumtextField:
			values = append(values, x.MediumtextField)
		case FieldLongtextField:
			values = append(values, x.LongtextField)
		case FieldEnumField:
			values = append(values, x.EnumField)
		case FieldSetField:
			values = append(values, x.SetField)
		case FieldBinaryField:
			values = append(values, x.BinaryField)
		case FieldVarbinaryField:
			values = append(values, x.VarbinaryField)
		case FieldBlobField:
			values = append(values, x.BlobField)
		case FieldTinyblobField:
			values = append(values, x.TinyblobField)
		case FieldMediumblobField:
			values = append(values, x.MediumblobField)
		case FieldLongblobField:
			values = append(values, x.LongblobField)
		case FieldDateField:
			values = append(values, x.DateField)
		case FieldTimeField:
			values = append(values, x.TimeField)
		case FieldYearField:
			values = append(values, x.YearField)
		case FieldDatetimeField:
			values = append(values, x.DatetimeField)
		case FieldTimestampField:
			values = append(values, x.TimestampField)
		case FieldUuidField:
			values = append(values, x.UuidField)
		}
	}

	return values
}

func GetFieldPlaceholders(fieldList []string) []string {
	placeholders := make([]string, 0, len(fieldList))

	for _, field := range fieldList {
		switch field {
		case FieldId:
			placeholders = append(placeholders, "?")
		case FieldTinySigned:
			placeholders = append(placeholders, "?")
		case FieldTinyUnsigned:
			placeholders = append(placeholders, "?")
		case FieldSmallSigned:
			placeholders = append(placeholders, "?")
		case FieldSmallUnsigned:
			placeholders = append(placeholders, "?")
		case FieldMediumSigned:
			placeholders = append(placeholders, "?")
		case FieldMediumUnsigned:
			placeholders = append(placeholders, "?")
		case FieldIntSigned:
			placeholders = append(placeholders, "?")
		case FieldIntUnsigned:
			placeholders = append(placeholders, "?")
		case FieldBigSigned:
			placeholders = append(placeholders, "?")
		case FieldBigUnsigned:
			placeholders = append(placeholders, "?")
		case FieldFloatField:
			placeholders = append(placeholders, "?")
		case FieldDoubleField:
			placeholders = append(placeholders, "?")
		case FieldRealField:
			placeholders = append(placeholders, "?")
		case FieldDecimalField:
			placeholders = append(placeholders, "?")
		case FieldDecField:
			placeholders = append(placeholders, "?")
		case FieldNumericField:
			placeholders = append(placeholders, "?")
		case FieldFixedField:
			placeholders = append(placeholders, "?")
		case FieldBit1:
			placeholders = append(placeholders, "?")
		case FieldBit8:
			placeholders = append(placeholders, "?")
		case FieldBit64:
			placeholders = append(placeholders, "?")
		case FieldBoolField:
			placeholders = append(placeholders, "?")
		case FieldBooleanField:
			placeholders = append(placeholders, "?")
		case FieldCharField:
			placeholders = append(placeholders, "?")
		case FieldVarcharField:
			placeholders = append(placeholders, "?")
		case FieldTextField:
			placeholders = append(placeholders, "?")
		case FieldTinytextField:
			placeholders = append(placeholders, "?")
		case FieldMediumtextField:
			placeholders = append(placeholders, "?")
		case FieldLongtextField:
			placeholders = append(placeholders, "?")
		case FieldEnumField:
			placeholders = append(placeholders, "?")
		case FieldSetField:
			placeholders = append(placeholders, "?")
		case FieldBinaryField:
			placeholders = append(placeholders, "?")
		case FieldVarbinaryField:
			placeholders = append(placeholders, "?")
		case FieldBlobField:
			placeholders = append(placeholders, "?")
		case FieldTinyblobField:
			placeholders = append(placeholders, "?")
		case FieldMediumblobField:
			placeholders = append(placeholders, "?")
		case FieldLongblobField:
			placeholders = append(placeholders, "?")
		case FieldDateField:
			placeholders = append(placeholders, "?")
		case FieldTimeField:
			placeholders = append(placeholders, "?")
		case FieldYearField:
			placeholders = append(placeholders, "?")
		case FieldDatetimeField:
			placeholders = append(placeholders, "?")
		case FieldTimestampField:
			placeholders = append(placeholders, "?")
		case FieldUuidField:
			placeholders = append(placeholders, "?")
		}
	}

	return placeholders
}

func GetFieldPlaceholdersWithName(fieldList []string) []string {
	placeholders := make([]string, 0, len(fieldList))

	for _, field := range fieldList {
		switch field {
		case FieldId:
			placeholders = append(placeholders, "`"+FieldId+"` = ?")
		case FieldTinySigned:
			placeholders = append(placeholders, "`"+FieldTinySigned+"` = ?")
		case FieldTinyUnsigned:
			placeholders = append(placeholders, "`"+FieldTinyUnsigned+"` = ?")
		case FieldSmallSigned:
			placeholders = append(placeholders, "`"+FieldSmallSigned+"` = ?")
		case FieldSmallUnsigned:
			placeholders = append(placeholders, "`"+FieldSmallUnsigned+"` = ?")
		case FieldMediumSigned:
			placeholders = append(placeholders, "`"+FieldMediumSigned+"` = ?")
		case FieldMediumUnsigned:
			placeholders = append(placeholders, "`"+FieldMediumUnsigned+"` = ?")
		case FieldIntSigned:
			placeholders = append(placeholders, "`"+FieldIntSigned+"` = ?")
		case FieldIntUnsigned:
			placeholders = append(placeholders, "`"+FieldIntUnsigned+"` = ?")
		case FieldBigSigned:
			placeholders = append(placeholders, "`"+FieldBigSigned+"` = ?")
		case FieldBigUnsigned:
			placeholders = append(placeholders, "`"+FieldBigUnsigned+"` = ?")
		case FieldFloatField:
			placeholders = append(placeholders, "`"+FieldFloatField+"` = ?")
		case FieldDoubleField:
			placeholders = append(placeholders, "`"+FieldDoubleField+"` = ?")
		case FieldRealField:
			placeholders = append(placeholders, "`"+FieldRealField+"` = ?")
		case FieldDecimalField:
			placeholders = append(placeholders, "`"+FieldDecimalField+"` = ?")
		case FieldDecField:
			placeholders = append(placeholders, "`"+FieldDecField+"` = ?")
		case FieldNumericField:
			placeholders = append(placeholders, "`"+FieldNumericField+"` = ?")
		case FieldFixedField:
			placeholders = append(placeholders, "`"+FieldFixedField+"` = ?")
		case FieldBit1:
			placeholders = append(placeholders, "`"+FieldBit1+"` = ?")
		case FieldBit8:
			placeholders = append(placeholders, "`"+FieldBit8+"` = ?")
		case FieldBit64:
			placeholders = append(placeholders, "`"+FieldBit64+"` = ?")
		case FieldBoolField:
			placeholders = append(placeholders, "`"+FieldBoolField+"` = ?")
		case FieldBooleanField:
			placeholders = append(placeholders, "`"+FieldBooleanField+"` = ?")
		case FieldCharField:
			placeholders = append(placeholders, "`"+FieldCharField+"` = ?")
		case FieldVarcharField:
			placeholders = append(placeholders, "`"+FieldVarcharField+"` = ?")
		case FieldTextField:
			placeholders = append(placeholders, "`"+FieldTextField+"` = ?")
		case FieldTinytextField:
			placeholders = append(placeholders, "`"+FieldTinytextField+"` = ?")
		case FieldMediumtextField:
			placeholders = append(placeholders, "`"+FieldMediumtextField+"` = ?")
		case FieldLongtextField:
			placeholders = append(placeholders, "`"+FieldLongtextField+"` = ?")
		case FieldEnumField:
			placeholders = append(placeholders, "`"+FieldEnumField+"` = ?")
		case FieldSetField:
			placeholders = append(placeholders, "`"+FieldSetField+"` = ?")
		case FieldBinaryField:
			placeholders = append(placeholders, "`"+FieldBinaryField+"` = ?")
		case FieldVarbinaryField:
			placeholders = append(placeholders, "`"+FieldVarbinaryField+"` = ?")
		case FieldBlobField:
			placeholders = append(placeholders, "`"+FieldBlobField+"` = ?")
		case FieldTinyblobField:
			placeholders = append(placeholders, "`"+FieldTinyblobField+"` = ?")
		case FieldMediumblobField:
			placeholders = append(placeholders, "`"+FieldMediumblobField+"` = ?")
		case FieldLongblobField:
			placeholders = append(placeholders, "`"+FieldLongblobField+"` = ?")
		case FieldDateField:
			placeholders = append(placeholders, "`"+FieldDateField+"` = ?")
		case FieldTimeField:
			placeholders = append(placeholders, "`"+FieldTimeField+"` = ?")
		case FieldYearField:
			placeholders = append(placeholders, "`"+FieldYearField+"` = ?")
		case FieldDatetimeField:
			placeholders = append(placeholders, "`"+FieldDatetimeField+"` = ?")
		case FieldTimestampField:
			placeholders = append(placeholders, "`"+FieldTimestampField+"` = ?")
		case FieldUuidField:
			placeholders = append(placeholders, "`"+FieldUuidField+"` = ?")
		}
	}

	return placeholders
}

func GetBacktickedFields(fieldList []string) []string {
	fields := make([]string, 0, len(fieldList))

	for _, field := range fieldList {
		switch field {
		case FieldId:
			fields = append(fields, "`"+FieldId+"`")
		case FieldTinySigned:
			fields = append(fields, "`"+FieldTinySigned+"`")
		case FieldTinyUnsigned:
			fields = append(fields, "`"+FieldTinyUnsigned+"`")
		case FieldSmallSigned:
			fields = append(fields, "`"+FieldSmallSigned+"`")
		case FieldSmallUnsigned:
			fields = append(fields, "`"+FieldSmallUnsigned+"`")
		case FieldMediumSigned:
			fields = append(fields, "`"+FieldMediumSigned+"`")
		case FieldMediumUnsigned:
			fields = append(fields, "`"+FieldMediumUnsigned+"`")
		case FieldIntSigned:
			fields = append(fields, "`"+FieldIntSigned+"`")
		case FieldIntUnsigned:
			fields = append(fields, "`"+FieldIntUnsigned+"`")
		case FieldBigSigned:
			fields = append(fields, "`"+FieldBigSigned+"`")
		case FieldBigUnsigned:
			fields = append(fields, "`"+FieldBigUnsigned+"`")
		case FieldFloatField:
			fields = append(fields, "`"+FieldFloatField+"`")
		case FieldDoubleField:
			fields = append(fields, "`"+FieldDoubleField+"`")
		case FieldRealField:
			fields = append(fields, "`"+FieldRealField+"`")
		case FieldDecimalField:
			fields = append(fields, "`"+FieldDecimalField+"`")
		case FieldDecField:
			fields = append(fields, "`"+FieldDecField+"`")
		case FieldNumericField:
			fields = append(fields, "`"+FieldNumericField+"`")
		case FieldFixedField:
			fields = append(fields, "`"+FieldFixedField+"`")
		case FieldBit1:
			fields = append(fields, "`"+FieldBit1+"`")
		case FieldBit8:
			fields = append(fields, "`"+FieldBit8+"`")
		case FieldBit64:
			fields = append(fields, "`"+FieldBit64+"`")
		case FieldBoolField:
			fields = append(fields, "`"+FieldBoolField+"`")
		case FieldBooleanField:
			fields = append(fields, "`"+FieldBooleanField+"`")
		case FieldCharField:
			fields = append(fields, "`"+FieldCharField+"`")
		case FieldVarcharField:
			fields = append(fields, "`"+FieldVarcharField+"`")
		case FieldTextField:
			fields = append(fields, "`"+FieldTextField+"`")
		case FieldTinytextField:
			fields = append(fields, "`"+FieldTinytextField+"`")
		case FieldMediumtextField:
			fields = append(fields, "`"+FieldMediumtextField+"`")
		case FieldLongtextField:
			fields = append(fields, "`"+FieldLongtextField+"`")
		case FieldEnumField:
			fields = append(fields, "`"+FieldEnumField+"`")
		case FieldSetField:
			fields = append(fields, "`"+FieldSetField+"`")
		case FieldBinaryField:
			fields = append(fields, "`"+FieldBinaryField+"`")
		case FieldVarbinaryField:
			fields = append(fields, "`"+FieldVarbinaryField+"`")
		case FieldBlobField:
			fields = append(fields, "`"+FieldBlobField+"`")
		case FieldTinyblobField:
			fields = append(fields, "`"+FieldTinyblobField+"`")
		case FieldMediumblobField:
			fields = append(fields, "`"+FieldMediumblobField+"`")
		case FieldLongblobField:
			fields = append(fields, "`"+FieldLongblobField+"`")
		case FieldDateField:
			fields = append(fields, "`"+FieldDateField+"`")
		case FieldTimeField:
			fields = append(fields, "`"+FieldTimeField+"`")
		case FieldYearField:
			fields = append(fields, "`"+FieldYearField+"`")
		case FieldDatetimeField:
			fields = append(fields, "`"+FieldDatetimeField+"`")
		case FieldTimestampField:
			fields = append(fields, "`"+FieldTimestampField+"`")
		case FieldUuidField:
			fields = append(fields, "`"+FieldUuidField+"`")
		}
	}

	return fields
}

func getPreparedStmt(query string) (*sql.Stmt, error) {
	stmtMu.RLock()
	if stmt, ok := stmtCache[query]; ok {
		stmtMu.RUnlock()
		return stmt, nil
	}
	stmtMu.RUnlock()

	stmtMu.Lock()
	defer stmtMu.Unlock()
	if stmt, ok := stmtCache[query]; ok {
		return stmt, nil
	}
	stmt, err := db.Prepare(query)
	if err != nil {
		return nil, err
	}
	stmtCache[query] = stmt
	return stmt, nil
}

func scanRow(rows *sql.Rows) (*Entity, error) {
	x := &Entity{}
	var ptrId *string
	var ptrTinySigned *string
	var ptrTinyUnsigned *string
	var ptrSmallSigned *string
	var ptrSmallUnsigned *string
	var ptrMediumSigned *string
	var ptrMediumUnsigned *string
	var ptrIntSigned *string
	var ptrIntUnsigned *string
	var ptrBigSigned *string
	var ptrBigUnsigned *string
	var ptrFloatField *string
	var ptrDoubleField *string
	var ptrRealField *string
	var ptrDecimalField *string
	var ptrDecField *string
	var ptrNumericField *string
	var ptrFixedField *string
	var ptrBit1 *string
	var ptrBit8 *string
	var ptrBit64 *string
	var ptrBoolField *string
	var ptrBooleanField *string
	var ptrCharField *string
	var ptrVarcharField *string
	var ptrTextField *string
	var ptrTinytextField *string
	var ptrMediumtextField *string
	var ptrLongtextField *string
	var ptrEnumField *string
	var ptrSetField *string
	var ptrBinaryField *string
	var ptrVarbinaryField *string
	var ptrBlobField *string
	var ptrTinyblobField *string
	var ptrMediumblobField *string
	var ptrLongblobField *string
	var ptrDateField *string
	var ptrTimeField *string
	var ptrYearField *string
	var ptrDatetimeField *string
	var ptrTimestampField *string
	var ptrUuidField *string
	err := rows.Scan(
		&ptrId,
		&ptrTinySigned,
		&ptrTinyUnsigned,
		&ptrSmallSigned,
		&ptrSmallUnsigned,
		&ptrMediumSigned,
		&ptrMediumUnsigned,
		&ptrIntSigned,
		&ptrIntUnsigned,
		&ptrBigSigned,
		&ptrBigUnsigned,
		&ptrFloatField,
		&ptrDoubleField,
		&ptrRealField,
		&ptrDecimalField,
		&ptrDecField,
		&ptrNumericField,
		&ptrFixedField,
		&ptrBit1,
		&ptrBit8,
		&ptrBit64,
		&ptrBoolField,
		&ptrBooleanField,
		&ptrCharField,
		&ptrVarcharField,
		&ptrTextField,
		&ptrTinytextField,
		&ptrMediumtextField,
		&ptrLongtextField,
		&ptrEnumField,
		&ptrSetField,
		&ptrBinaryField,
		&ptrVarbinaryField,
		&ptrBlobField,
		&ptrTinyblobField,
		&ptrMediumblobField,
		&ptrLongblobField,
		&ptrDateField,
		&ptrTimeField,
		&ptrYearField,
		&ptrDatetimeField,
		&ptrTimestampField,
		&ptrUuidField,
	)
	if err != nil {
		return nil, err
	}
	if ptrId != nil {
		x.Id = *ptrId
	} else {
		x.Id = ""
	}
	if ptrTinySigned != nil {
		x.TinySigned = *ptrTinySigned
	} else {
		x.TinySigned = ""
	}
	if ptrTinyUnsigned != nil {
		x.TinyUnsigned = *ptrTinyUnsigned
	} else {
		x.TinyUnsigned = ""
	}
	if ptrSmallSigned != nil {
		x.SmallSigned = *ptrSmallSigned
	} else {
		x.SmallSigned = ""
	}
	if ptrSmallUnsigned != nil {
		x.SmallUnsigned = *ptrSmallUnsigned
	} else {
		x.SmallUnsigned = ""
	}
	if ptrMediumSigned != nil {
		x.MediumSigned = *ptrMediumSigned
	} else {
		x.MediumSigned = ""
	}
	if ptrMediumUnsigned != nil {
		x.MediumUnsigned = *ptrMediumUnsigned
	} else {
		x.MediumUnsigned = ""
	}
	if ptrIntSigned != nil {
		x.IntSigned = *ptrIntSigned
	} else {
		x.IntSigned = ""
	}
	if ptrIntUnsigned != nil {
		x.IntUnsigned = *ptrIntUnsigned
	} else {
		x.IntUnsigned = ""
	}
	if ptrBigSigned != nil {
		x.BigSigned = *ptrBigSigned
	} else {
		x.BigSigned = ""
	}
	if ptrBigUnsigned != nil {
		x.BigUnsigned = *ptrBigUnsigned
	} else {
		x.BigUnsigned = ""
	}
	if ptrFloatField != nil {
		x.FloatField = *ptrFloatField
	} else {
		x.FloatField = ""
	}
	if ptrDoubleField != nil {
		x.DoubleField = *ptrDoubleField
	} else {
		x.DoubleField = ""
	}
	if ptrRealField != nil {
		x.RealField = *ptrRealField
	} else {
		x.RealField = ""
	}
	if ptrDecimalField != nil {
		x.DecimalField = *ptrDecimalField
	} else {
		x.DecimalField = ""
	}
	if ptrDecField != nil {
		x.DecField = *ptrDecField
	} else {
		x.DecField = ""
	}
	if ptrNumericField != nil {
		x.NumericField = *ptrNumericField
	} else {
		x.NumericField = ""
	}
	if ptrFixedField != nil {
		x.FixedField = *ptrFixedField
	} else {
		x.FixedField = ""
	}
	if ptrBit1 != nil {
		x.Bit1 = *ptrBit1
	} else {
		x.Bit1 = ""
	}
	if ptrBit8 != nil {
		x.Bit8 = *ptrBit8
	} else {
		x.Bit8 = ""
	}
	if ptrBit64 != nil {
		x.Bit64 = *ptrBit64
	} else {
		x.Bit64 = ""
	}
	if ptrBoolField != nil {
		x.BoolField = *ptrBoolField
	} else {
		x.BoolField = ""
	}
	if ptrBooleanField != nil {
		x.BooleanField = *ptrBooleanField
	} else {
		x.BooleanField = ""
	}
	if ptrCharField != nil {
		x.CharField = *ptrCharField
	} else {
		x.CharField = ""
	}
	if ptrVarcharField != nil {
		x.VarcharField = *ptrVarcharField
	} else {
		x.VarcharField = ""
	}
	if ptrTextField != nil {
		x.TextField = *ptrTextField
	} else {
		x.TextField = ""
	}
	if ptrTinytextField != nil {
		x.TinytextField = *ptrTinytextField
	} else {
		x.TinytextField = ""
	}
	if ptrMediumtextField != nil {
		x.MediumtextField = *ptrMediumtextField
	} else {
		x.MediumtextField = ""
	}
	if ptrLongtextField != nil {
		x.LongtextField = *ptrLongtextField
	} else {
		x.LongtextField = ""
	}
	if ptrEnumField != nil {
		x.EnumField = *ptrEnumField
	} else {
		x.EnumField = ""
	}
	if ptrSetField != nil {
		x.SetField = *ptrSetField
	} else {
		x.SetField = ""
	}
	if ptrBinaryField != nil {
		x.BinaryField = *ptrBinaryField
	} else {
		x.BinaryField = ""
	}
	if ptrVarbinaryField != nil {
		x.VarbinaryField = *ptrVarbinaryField
	} else {
		x.VarbinaryField = ""
	}
	if ptrBlobField != nil {
		x.BlobField = *ptrBlobField
	} else {
		x.BlobField = ""
	}
	if ptrTinyblobField != nil {
		x.TinyblobField = *ptrTinyblobField
	} else {
		x.TinyblobField = ""
	}
	if ptrMediumblobField != nil {
		x.MediumblobField = *ptrMediumblobField
	} else {
		x.MediumblobField = ""
	}
	if ptrLongblobField != nil {
		x.LongblobField = *ptrLongblobField
	} else {
		x.LongblobField = ""
	}
	if ptrDateField != nil {
		x.DateField = *ptrDateField
	} else {
		x.DateField = ""
	}
	if ptrTimeField != nil {
		x.TimeField = *ptrTimeField
	} else {
		x.TimeField = ""
	}
	if ptrYearField != nil {
		x.YearField = *ptrYearField
	} else {
		x.YearField = ""
	}
	if ptrDatetimeField != nil {
		x.DatetimeField = *ptrDatetimeField
	} else {
		x.DatetimeField = ""
	}
	if ptrTimestampField != nil {
		x.TimestampField = *ptrTimestampField
	} else {
		x.TimestampField = ""
	}
	if ptrUuidField != nil {
		x.UuidField = *ptrUuidField
	} else {
		x.UuidField = ""
	}
	return x, nil
}

func readRows(rows *sql.Rows) ([]*Entity, error) {
	defer rows.Close()
	var results []*Entity
	for rows.Next() {
		x, err := scanRow(rows)
		if err != nil {
			return results, err
		}
		results = append(results, x)
	}
	return results, nil
}

func DBTruncate() (sql.Result, error) {
	query := "TRUNCATE TABLE " + FQTN
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.Exec()
}

func DBTruncateContext(ctx context.Context) (sql.Result, error) {
	query := "TRUNCATE TABLE " + FQTN
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.ExecContext(ctx)
}

func (x *Entity) DBInsert(fieldsToInsert []string) (sql.Result, error) {
	query := "INSERT INTO " + FQTN + " (" + strings.Join(GetBacktickedFields(fieldsToInsert), ", ") + ") VALUES (" + strings.Join(GetFieldPlaceholders(fieldsToInsert), ", ") + ")"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.Exec(x.GetFieldValues(fieldsToInsert)...)
}

func (x *Entity) DBInsertContext(ctx context.Context, fieldsToInsert []string) (sql.Result, error) {
	query := "INSERT INTO " + FQTN + " (" + strings.Join(GetBacktickedFields(fieldsToInsert), ", ") + ") VALUES (" + strings.Join(GetFieldPlaceholders(fieldsToInsert), ", ") + ")"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.ExecContext(ctx, x.GetFieldValues(fieldsToInsert)...)
}

func (x *Entity) DBDeleteWhereAll(fieldsToMatch []string) (sql.Result, error) {
	query := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.Exec(x.GetFieldValues(fieldsToMatch)...)
}

func (x *Entity) DBDeleteWhereAllContext(ctx context.Context, fieldsToMatch []string) (sql.Result, error) {
	query := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.ExecContext(ctx, x.GetFieldValues(fieldsToMatch)...)
}

func (x *Entity) DBDeleteWhereAny(fieldsToMatch []string) (sql.Result, error) {
	query := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.Exec(x.GetFieldValues(fieldsToMatch)...)
}

func (x *Entity) DBDeleteWhereAnyContext(ctx context.Context, fieldsToMatch []string) (sql.Result, error) {
	query := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.ExecContext(ctx, x.GetFieldValues(fieldsToMatch)...)
}

func (x *Entity) DBUpdateWhereAll(fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	query := "UPDATE " + FQTN + " SET " + strings.Join(GetFieldPlaceholdersWithName(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	values := append(x.GetFieldValues(fieldsToUpdate), x.GetFieldValues(fieldsToMatch)...)
	return stmt.Exec(values...)
}

func (x *Entity) DBUpdateWhereAllContext(ctx context.Context, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	query := "UPDATE " + FQTN + " SET " + strings.Join(GetFieldPlaceholdersWithName(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	values := append(x.GetFieldValues(fieldsToUpdate), x.GetFieldValues(fieldsToMatch)...)
	return stmt.ExecContext(ctx, values...)
}

func (x *Entity) DBUpdateWhereAny(fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	query := "UPDATE " + FQTN + " SET " + strings.Join(GetFieldPlaceholdersWithName(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	values := append(x.GetFieldValues(fieldsToUpdate), x.GetFieldValues(fieldsToMatch)...)
	return stmt.Exec(values...)
}

func (x *Entity) DBUpdateWhereAnyContext(ctx context.Context, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	query := "UPDATE " + FQTN + " SET " + strings.Join(GetFieldPlaceholdersWithName(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	values := append(x.GetFieldValues(fieldsToUpdate), x.GetFieldValues(fieldsToMatch)...)
	return stmt.ExecContext(ctx, values...)
}

func DBSelectAll() ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(rows)
}

func DBSelectAllContext(ctx context.Context) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(rows)
}

func (x *Entity) DBSelectAllWhereAll(fieldsToMatch []string) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query(x.GetFieldValues(fieldsToMatch)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(rows)
}

func (x *Entity) DBSelectAllWhereAllContext(ctx context.Context, fieldsToMatch []string) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx, x.GetFieldValues(fieldsToMatch)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(rows)
}

func (x *Entity) DBSelectAllWhereAny(fieldsToMatch []string) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query(x.GetFieldValues(fieldsToMatch)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(rows)
}

func (x *Entity) DBSelectAllWhereAnyContext(ctx context.Context, fieldsToMatch []string) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE " + strings.Join(GetBacktickedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx, x.GetFieldValues(fieldsToMatch)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(rows)
}

func (x *Entity) DBExists(fields []string) (bool, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") +
		" FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fields), " = ? AND ") + " = ? LIMIT 1"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return false, err
	}
	rows, err := stmt.Query(x.GetFieldValues(fields)...)
	if err != nil {
		return false, err
	}
	defer rows.Close()
	results, err := readRows(rows)
	if err != nil {
		return false, err
	}
	if len(results) == 0 {
		return false, nil
	}
	*x = *results[0]
	return true, nil
}

func (x *Entity) DBExistsContext(ctx context.Context, fields []string) (bool, error) {
	query := "SELECT " + strings.Join(GetBacktickedFields(Fields), ", ") +
		" FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fields), " = ? AND ") + " = ? LIMIT 1"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return false, err
	}
	rows, err := stmt.QueryContext(ctx, x.GetFieldValues(fields)...)
	if err != nil {
		return false, err
	}
	defer rows.Close()
	results, err := readRows(rows)
	if err != nil {
		return false, err
	}
	if len(results) == 0 {
		return false, nil
	}
	*x = *results[0]
	return true, nil
}

func (x *Entity) DBCountWhereAll(fields []string) (int, error) {
	query := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fields), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return 0, err
	}
	var count int
	err = stmt.QueryRow(x.GetFieldValues(fields)...).Scan(&count)
	return count, err
}

func (x *Entity) DBCountWhereAllContext(ctx context.Context, fields []string) (int, error) {
	query := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fields), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return 0, err
	}
	var count int
	err = stmt.QueryRowContext(ctx, x.GetFieldValues(fields)...).Scan(&count)
	return count, err
}

func (x *Entity) DBCountWhereAny(fields []string) (int, error) {
	query := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fields), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return 0, err
	}
	var count int
	err = stmt.QueryRow(x.GetFieldValues(fields)...).Scan(&count)
	return count, err
}

func (x *Entity) DBCountWhereAnyContext(ctx context.Context, fields []string) (int, error) {
	query := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetBacktickedFields(fields), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return 0, err
	}
	var count int
	err = stmt.QueryRowContext(ctx, x.GetFieldValues(fields)...).Scan(&count)
	return count, err
}

func (x *Entity) DBFindOrCreate(fields []string) error {
	exists, err := x.DBExists(fields)
	if err != nil {
		return err
	}
	if exists {
		return nil
	}
	_, err = x.DBInsert(fields)
	if err != nil {
		return err
	}
	_, err = x.DBExists(fields)
	if err != nil {
		return err
	}
	return nil
}

func (x *Entity) DBFindOrCreateContext(ctx context.Context, fields []string) error {
	exists, err := x.DBExistsContext(ctx, fields)
	if err != nil {
		return err
	}
	if exists {
		return nil
	}
	_, err = x.DBInsertContext(ctx, fields)
	if err != nil {
		return err
	}
	_, err = x.DBExistsContext(ctx, fields)
	if err != nil {
		return err
	}
	return nil
}
