// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rah-0/margo-test/ent/alpha"
)

// Alpha is the model entity for the Alpha schema.
type Alpha struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "Uuid" field.
	UUID string `json:"Uuid,omitempty"`
	// FirstInsert holds the value of the "FirstInsert" field.
	FirstInsert string `json:"FirstInsert,omitempty"`
	// LastUpdate holds the value of the "LastUpdate" field.
	LastUpdate string `json:"LastUpdate,omitempty"`
	// Animal holds the value of the "Animal" field.
	Animal string `json:"Animal,omitempty"`
	// BigNumber holds the value of the "BigNumber" field.
	BigNumber string `json:"BigNumber,omitempty"`
	// TestField holds the value of the "TestField" field.
	TestField    string `json:"TestField,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Alpha) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case alpha.FieldID:
			values[i] = new(sql.NullInt64)
		case alpha.FieldUUID, alpha.FieldFirstInsert, alpha.FieldLastUpdate, alpha.FieldAnimal, alpha.FieldBigNumber, alpha.FieldTestField:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Alpha fields.
func (a *Alpha) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case alpha.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case alpha.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Uuid", values[i])
			} else if value.Valid {
				a.UUID = value.String
			}
		case alpha.FieldFirstInsert:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FirstInsert", values[i])
			} else if value.Valid {
				a.FirstInsert = value.String
			}
		case alpha.FieldLastUpdate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field LastUpdate", values[i])
			} else if value.Valid {
				a.LastUpdate = value.String
			}
		case alpha.FieldAnimal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Animal", values[i])
			} else if value.Valid {
				a.Animal = value.String
			}
		case alpha.FieldBigNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field BigNumber", values[i])
			} else if value.Valid {
				a.BigNumber = value.String
			}
		case alpha.FieldTestField:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TestField", values[i])
			} else if value.Valid {
				a.TestField = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Alpha.
// This includes values selected through modifiers, order, etc.
func (a *Alpha) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Alpha.
// Note that you need to call Alpha.Unwrap() before calling this method if this Alpha
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Alpha) Update() *AlphaUpdateOne {
	return NewAlphaClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Alpha entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Alpha) Unwrap() *Alpha {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Alpha is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Alpha) String() string {
	var builder strings.Builder
	builder.WriteString("Alpha(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("Uuid=")
	builder.WriteString(a.UUID)
	builder.WriteString(", ")
	builder.WriteString("FirstInsert=")
	builder.WriteString(a.FirstInsert)
	builder.WriteString(", ")
	builder.WriteString("LastUpdate=")
	builder.WriteString(a.LastUpdate)
	builder.WriteString(", ")
	builder.WriteString("Animal=")
	builder.WriteString(a.Animal)
	builder.WriteString(", ")
	builder.WriteString("BigNumber=")
	builder.WriteString(a.BigNumber)
	builder.WriteString(", ")
	builder.WriteString("TestField=")
	builder.WriteString(a.TestField)
	builder.WriteByte(')')
	return builder.String()
}

// Alphas is a parsable slice of Alpha.
type Alphas []*Alpha
