// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rah-0/margo-test/ent/alpha"
	"github.com/rah-0/margo-test/ent/predicate"
)

// AlphaUpdate is the builder for updating Alpha entities.
type AlphaUpdate struct {
	config
	hooks    []Hook
	mutation *AlphaMutation
}

// Where appends a list predicates to the AlphaUpdate builder.
func (au *AlphaUpdate) Where(ps ...predicate.Alpha) *AlphaUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUUID sets the "Uuid" field.
func (au *AlphaUpdate) SetUUID(s string) *AlphaUpdate {
	au.mutation.SetUUID(s)
	return au
}

// SetNillableUUID sets the "Uuid" field if the given value is not nil.
func (au *AlphaUpdate) SetNillableUUID(s *string) *AlphaUpdate {
	if s != nil {
		au.SetUUID(*s)
	}
	return au
}

// SetFirstInsert sets the "FirstInsert" field.
func (au *AlphaUpdate) SetFirstInsert(s string) *AlphaUpdate {
	au.mutation.SetFirstInsert(s)
	return au
}

// SetNillableFirstInsert sets the "FirstInsert" field if the given value is not nil.
func (au *AlphaUpdate) SetNillableFirstInsert(s *string) *AlphaUpdate {
	if s != nil {
		au.SetFirstInsert(*s)
	}
	return au
}

// SetLastUpdate sets the "LastUpdate" field.
func (au *AlphaUpdate) SetLastUpdate(s string) *AlphaUpdate {
	au.mutation.SetLastUpdate(s)
	return au
}

// SetNillableLastUpdate sets the "LastUpdate" field if the given value is not nil.
func (au *AlphaUpdate) SetNillableLastUpdate(s *string) *AlphaUpdate {
	if s != nil {
		au.SetLastUpdate(*s)
	}
	return au
}

// SetAnimal sets the "Animal" field.
func (au *AlphaUpdate) SetAnimal(s string) *AlphaUpdate {
	au.mutation.SetAnimal(s)
	return au
}

// SetNillableAnimal sets the "Animal" field if the given value is not nil.
func (au *AlphaUpdate) SetNillableAnimal(s *string) *AlphaUpdate {
	if s != nil {
		au.SetAnimal(*s)
	}
	return au
}

// SetBigNumber sets the "BigNumber" field.
func (au *AlphaUpdate) SetBigNumber(s string) *AlphaUpdate {
	au.mutation.SetBigNumber(s)
	return au
}

// SetNillableBigNumber sets the "BigNumber" field if the given value is not nil.
func (au *AlphaUpdate) SetNillableBigNumber(s *string) *AlphaUpdate {
	if s != nil {
		au.SetBigNumber(*s)
	}
	return au
}

// SetTestField sets the "TestField" field.
func (au *AlphaUpdate) SetTestField(s string) *AlphaUpdate {
	au.mutation.SetTestField(s)
	return au
}

// SetNillableTestField sets the "TestField" field if the given value is not nil.
func (au *AlphaUpdate) SetNillableTestField(s *string) *AlphaUpdate {
	if s != nil {
		au.SetTestField(*s)
	}
	return au
}

// ClearTestField clears the value of the "TestField" field.
func (au *AlphaUpdate) ClearTestField() *AlphaUpdate {
	au.mutation.ClearTestField()
	return au
}

// Mutation returns the AlphaMutation object of the builder.
func (au *AlphaUpdate) Mutation() *AlphaMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AlphaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AlphaUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AlphaUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AlphaUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AlphaUpdate) check() error {
	if v, ok := au.mutation.UUID(); ok {
		if err := alpha.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "Uuid", err: fmt.Errorf(`ent: validator failed for field "Alpha.Uuid": %w`, err)}
		}
	}
	if v, ok := au.mutation.Animal(); ok {
		if err := alpha.AnimalValidator(v); err != nil {
			return &ValidationError{Name: "Animal", err: fmt.Errorf(`ent: validator failed for field "Alpha.Animal": %w`, err)}
		}
	}
	return nil
}

func (au *AlphaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(alpha.Table, alpha.Columns, sqlgraph.NewFieldSpec(alpha.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UUID(); ok {
		_spec.SetField(alpha.FieldUUID, field.TypeString, value)
	}
	if value, ok := au.mutation.FirstInsert(); ok {
		_spec.SetField(alpha.FieldFirstInsert, field.TypeString, value)
	}
	if value, ok := au.mutation.LastUpdate(); ok {
		_spec.SetField(alpha.FieldLastUpdate, field.TypeString, value)
	}
	if value, ok := au.mutation.Animal(); ok {
		_spec.SetField(alpha.FieldAnimal, field.TypeString, value)
	}
	if value, ok := au.mutation.BigNumber(); ok {
		_spec.SetField(alpha.FieldBigNumber, field.TypeString, value)
	}
	if value, ok := au.mutation.TestField(); ok {
		_spec.SetField(alpha.FieldTestField, field.TypeString, value)
	}
	if au.mutation.TestFieldCleared() {
		_spec.ClearField(alpha.FieldTestField, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alpha.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AlphaUpdateOne is the builder for updating a single Alpha entity.
type AlphaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AlphaMutation
}

// SetUUID sets the "Uuid" field.
func (auo *AlphaUpdateOne) SetUUID(s string) *AlphaUpdateOne {
	auo.mutation.SetUUID(s)
	return auo
}

// SetNillableUUID sets the "Uuid" field if the given value is not nil.
func (auo *AlphaUpdateOne) SetNillableUUID(s *string) *AlphaUpdateOne {
	if s != nil {
		auo.SetUUID(*s)
	}
	return auo
}

// SetFirstInsert sets the "FirstInsert" field.
func (auo *AlphaUpdateOne) SetFirstInsert(s string) *AlphaUpdateOne {
	auo.mutation.SetFirstInsert(s)
	return auo
}

// SetNillableFirstInsert sets the "FirstInsert" field if the given value is not nil.
func (auo *AlphaUpdateOne) SetNillableFirstInsert(s *string) *AlphaUpdateOne {
	if s != nil {
		auo.SetFirstInsert(*s)
	}
	return auo
}

// SetLastUpdate sets the "LastUpdate" field.
func (auo *AlphaUpdateOne) SetLastUpdate(s string) *AlphaUpdateOne {
	auo.mutation.SetLastUpdate(s)
	return auo
}

// SetNillableLastUpdate sets the "LastUpdate" field if the given value is not nil.
func (auo *AlphaUpdateOne) SetNillableLastUpdate(s *string) *AlphaUpdateOne {
	if s != nil {
		auo.SetLastUpdate(*s)
	}
	return auo
}

// SetAnimal sets the "Animal" field.
func (auo *AlphaUpdateOne) SetAnimal(s string) *AlphaUpdateOne {
	auo.mutation.SetAnimal(s)
	return auo
}

// SetNillableAnimal sets the "Animal" field if the given value is not nil.
func (auo *AlphaUpdateOne) SetNillableAnimal(s *string) *AlphaUpdateOne {
	if s != nil {
		auo.SetAnimal(*s)
	}
	return auo
}

// SetBigNumber sets the "BigNumber" field.
func (auo *AlphaUpdateOne) SetBigNumber(s string) *AlphaUpdateOne {
	auo.mutation.SetBigNumber(s)
	return auo
}

// SetNillableBigNumber sets the "BigNumber" field if the given value is not nil.
func (auo *AlphaUpdateOne) SetNillableBigNumber(s *string) *AlphaUpdateOne {
	if s != nil {
		auo.SetBigNumber(*s)
	}
	return auo
}

// SetTestField sets the "TestField" field.
func (auo *AlphaUpdateOne) SetTestField(s string) *AlphaUpdateOne {
	auo.mutation.SetTestField(s)
	return auo
}

// SetNillableTestField sets the "TestField" field if the given value is not nil.
func (auo *AlphaUpdateOne) SetNillableTestField(s *string) *AlphaUpdateOne {
	if s != nil {
		auo.SetTestField(*s)
	}
	return auo
}

// ClearTestField clears the value of the "TestField" field.
func (auo *AlphaUpdateOne) ClearTestField() *AlphaUpdateOne {
	auo.mutation.ClearTestField()
	return auo
}

// Mutation returns the AlphaMutation object of the builder.
func (auo *AlphaUpdateOne) Mutation() *AlphaMutation {
	return auo.mutation
}

// Where appends a list predicates to the AlphaUpdate builder.
func (auo *AlphaUpdateOne) Where(ps ...predicate.Alpha) *AlphaUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AlphaUpdateOne) Select(field string, fields ...string) *AlphaUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Alpha entity.
func (auo *AlphaUpdateOne) Save(ctx context.Context) (*Alpha, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AlphaUpdateOne) SaveX(ctx context.Context) *Alpha {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AlphaUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AlphaUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AlphaUpdateOne) check() error {
	if v, ok := auo.mutation.UUID(); ok {
		if err := alpha.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "Uuid", err: fmt.Errorf(`ent: validator failed for field "Alpha.Uuid": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Animal(); ok {
		if err := alpha.AnimalValidator(v); err != nil {
			return &ValidationError{Name: "Animal", err: fmt.Errorf(`ent: validator failed for field "Alpha.Animal": %w`, err)}
		}
	}
	return nil
}

func (auo *AlphaUpdateOne) sqlSave(ctx context.Context) (_node *Alpha, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(alpha.Table, alpha.Columns, sqlgraph.NewFieldSpec(alpha.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Alpha.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, alpha.FieldID)
		for _, f := range fields {
			if !alpha.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != alpha.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UUID(); ok {
		_spec.SetField(alpha.FieldUUID, field.TypeString, value)
	}
	if value, ok := auo.mutation.FirstInsert(); ok {
		_spec.SetField(alpha.FieldFirstInsert, field.TypeString, value)
	}
	if value, ok := auo.mutation.LastUpdate(); ok {
		_spec.SetField(alpha.FieldLastUpdate, field.TypeString, value)
	}
	if value, ok := auo.mutation.Animal(); ok {
		_spec.SetField(alpha.FieldAnimal, field.TypeString, value)
	}
	if value, ok := auo.mutation.BigNumber(); ok {
		_spec.SetField(alpha.FieldBigNumber, field.TypeString, value)
	}
	if value, ok := auo.mutation.TestField(); ok {
		_spec.SetField(alpha.FieldTestField, field.TypeString, value)
	}
	if auo.mutation.TestFieldCleared() {
		_spec.ClearField(alpha.FieldTestField, field.TypeString)
	}
	_node = &Alpha{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alpha.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
