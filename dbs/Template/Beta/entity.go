package Beta

// ---------------------------------------------------------------
// The code in this file is autogenerated, do not modify manually!
// ---------------------------------------------------------------

import (
	"context"
	"database/sql"
	"strings"
	"sync"
)

const (
	FQTN             = "`template`.`beta`"
	FieldFirstInsert = "first_insert"
	FieldLastUpdate  = "last_update"
	FieldUuid        = "uuid"
	FieldName        = "name"
)

var (
	Fields    = []string{FieldFirstInsert, FieldLastUpdate, FieldUuid, FieldName}
	db        *sql.DB
	stmtMu    sync.RWMutex
	stmtCache = make(map[string]*sql.Stmt)
)

type Entity struct {
	FirstInsert string `json:",omitempty,omitzero"`
	LastUpdate  string `json:",omitempty,omitzero"`
	Uuid        string `json:",omitempty,omitzero"`
	Name        string `json:",omitempty,omitzero"`
}

func SetDB(x *sql.DB) {
	db = x
}

func (x *Entity) GetFieldValue(field string) any {
	switch field {
	case FieldFirstInsert:
		return x.FirstInsert
	case FieldLastUpdate:
		return x.LastUpdate
	case FieldUuid:
		return x.Uuid
	case FieldName:
		return x.Name
	}
	return nil
}

func (x *Entity) GetFieldsValues(fieldList []string) []any {
	values := make([]any, 0, len(fieldList))
	for _, field := range fieldList {
		values = append(values, x.GetFieldValue(field))
	}
	return values
}

func GetValuePlaceholder(field string) string {
	switch field {
	case FieldFirstInsert:
		return "?"
	case FieldLastUpdate:
		return "?"
	case FieldUuid:
		return "?"
	case FieldName:
		return "?"
	}
	return ""
}

func GetValuesPlaceholders(fieldList []string) []string {
	placeholders := make([]string, 0, len(fieldList))
	for _, field := range fieldList {
		placeholders = append(placeholders, GetValuePlaceholder(field))
	}
	return placeholders
}

func GetQualifiedField(field string) string {
	switch field {
	case FieldFirstInsert:
		return FQTN + ".`" + FieldFirstInsert + "`"
	case FieldLastUpdate:
		return FQTN + ".`" + FieldLastUpdate + "`"
	case FieldUuid:
		return FQTN + ".`" + FieldUuid + "`"
	case FieldName:
		return FQTN + ".`" + FieldName + "`"
	}
	return ""
}

func GetQualifiedFields(fieldList []string) []string {
	fields := make([]string, 0, len(fieldList))
	for _, field := range fieldList {
		fields = append(fields, GetQualifiedField(field))
	}
	return fields
}

func GetQualifiedPlaceholder(field string) string {
	switch field {
	case FieldFirstInsert:
		return FQTN + ".`" + FieldFirstInsert + "` = ?"
	case FieldLastUpdate:
		return FQTN + ".`" + FieldLastUpdate + "` = ?"
	case FieldUuid:
		return FQTN + ".`" + FieldUuid + "` = ?"
	case FieldName:
		return FQTN + ".`" + FieldName + "` = ?"
	}
	return ""
}

func GetQualifiedPlaceholders(fieldList []string) []string {
	placeholders := make([]string, 0, len(fieldList))
	for _, field := range fieldList {
		placeholders = append(placeholders, GetQualifiedPlaceholder(field))
	}
	return placeholders
}

func getPreparedStmt(query string) (*sql.Stmt, error) {
	stmtMu.RLock()
	if stmt, ok := stmtCache[query]; ok {
		stmtMu.RUnlock()
		return stmt, nil
	}
	stmtMu.RUnlock()

	stmtMu.Lock()
	defer stmtMu.Unlock()
	if stmt, ok := stmtCache[query]; ok {
		return stmt, nil
	}
	stmt, err := db.Prepare(query)
	if err != nil {
		return nil, err
	}
	stmtCache[query] = stmt
	return stmt, nil
}

func scanRow(fields []string, rows *sql.Rows) (*Entity, error) {
	x := &Entity{}
	var (
		ptrFirstInsert *string
		ptrLastUpdate  *string
		ptrUuid        *string
		ptrName        *string
		scanTargets    []any
	)

	for _, field := range fields {
		switch field {
		case FieldFirstInsert:
			scanTargets = append(scanTargets, &ptrFirstInsert)
		case FieldLastUpdate:
			scanTargets = append(scanTargets, &ptrLastUpdate)
		case FieldUuid:
			scanTargets = append(scanTargets, &ptrUuid)
		case FieldName:
			scanTargets = append(scanTargets, &ptrName)
		}
	}

	err := rows.Scan(scanTargets...)
	if err != nil {
		return nil, err
	}

	if ptrFirstInsert != nil {
		x.FirstInsert = *ptrFirstInsert
	} else {
		x.FirstInsert = ""
	}
	if ptrLastUpdate != nil {
		x.LastUpdate = *ptrLastUpdate
	} else {
		x.LastUpdate = ""
	}
	if ptrUuid != nil {
		x.Uuid = *ptrUuid
	} else {
		x.Uuid = ""
	}
	if ptrName != nil {
		x.Name = *ptrName
	} else {
		x.Name = ""
	}
	return x, nil
}

func readRows(fields []string, rows *sql.Rows) ([]*Entity, error) {
	defer rows.Close()
	var results []*Entity
	for rows.Next() {
		x, err := scanRow(fields, rows)
		if err != nil {
			return results, err
		}
		results = append(results, x)
	}
	return results, nil
}

func DBTruncate() (sql.Result, error) {
	query := "TRUNCATE TABLE " + FQTN
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.Exec()
}

func DBTruncateContext(ctx context.Context) (sql.Result, error) {
	query := "TRUNCATE TABLE " + FQTN
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.ExecContext(ctx)
}

func (x *Entity) DBInsert(fieldsToInsert []string) (sql.Result, error) {
	query := "INSERT INTO " + FQTN + " (" + strings.Join(GetQualifiedFields(fieldsToInsert), ", ") + ") VALUES (" + strings.Join(GetValuesPlaceholders(fieldsToInsert), ", ") + ")"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.Exec(x.GetFieldsValues(fieldsToInsert)...)
}

func (x *Entity) DBInsertContext(ctx context.Context, fieldsToInsert []string) (sql.Result, error) {
	query := "INSERT INTO " + FQTN + " (" + strings.Join(GetQualifiedFields(fieldsToInsert), ", ") + ") VALUES (" + strings.Join(GetValuesPlaceholders(fieldsToInsert), ", ") + ")"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.ExecContext(ctx, x.GetFieldsValues(fieldsToInsert)...)
}

func (x *Entity) DBDeleteWhereAll(fieldsToMatch []string) (sql.Result, error) {
	query := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.Exec(x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBDeleteWhereAllContext(ctx context.Context, fieldsToMatch []string) (sql.Result, error) {
	query := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.ExecContext(ctx, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBDeleteWhereAny(fieldsToMatch []string) (sql.Result, error) {
	query := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.Exec(x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBDeleteWhereAnyContext(ctx context.Context, fieldsToMatch []string) (sql.Result, error) {
	query := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	return stmt.ExecContext(ctx, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBUpdateWhereAll(fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	query := "UPDATE " + FQTN + " SET " + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	values := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)
	return stmt.Exec(values...)
}

func (x *Entity) DBUpdateWhereAllContext(ctx context.Context, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	query := "UPDATE " + FQTN + " SET " + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	values := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)
	return stmt.ExecContext(ctx, values...)
}

func (x *Entity) DBUpdateWhereAny(fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	query := "UPDATE " + FQTN + " SET " + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	values := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)
	return stmt.Exec(values...)
}

func (x *Entity) DBUpdateWhereAnyContext(ctx context.Context, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	query := "UPDATE " + FQTN + " SET " + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	values := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)
	return stmt.ExecContext(ctx, values...)
}

func DBSelectAll() ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func DBSelectAllContext(ctx context.Context) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func DBSelectAllWithFields(fields []string) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(fields), ", ") + " FROM " + FQTN
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(fields, rows)
}

func DBSelectAllWithFieldsContext(ctx context.Context, fields []string) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(fields), ", ") + " FROM " + FQTN
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(fields, rows)
}

func DBSubquerySelectAll(subquery string, args ...any) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " " + subquery
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query(args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func DBSubquerySelectAllContext(ctx context.Context, subquery string, args ...any) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " " + subquery
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func DBSubquerySelectAllWithFields(fields []string, subquery string, args ...any) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(fields), ", ") + " FROM " + FQTN + " " + subquery
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query(args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(fields, rows)
}

func DBSubquerySelectAllWithFieldsContext(ctx context.Context, fields []string, subquery string, args ...any) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(fields), ", ") + " FROM " + FQTN + " " + subquery
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(fields, rows)
}

func (x *Entity) DBSelectAllWhereAll(fieldsToMatch []string) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query(x.GetFieldsValues(fieldsToMatch)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func (x *Entity) DBSelectAllWhereAllContext(ctx context.Context, fieldsToMatch []string) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx, x.GetFieldsValues(fieldsToMatch)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func (x *Entity) DBSelectAllWhereAny(fieldsToMatch []string) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.Query(x.GetFieldsValues(fieldsToMatch)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func (x *Entity) DBSelectAllWhereAnyContext(ctx context.Context, fieldsToMatch []string) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	rows, err := stmt.QueryContext(ctx, x.GetFieldsValues(fieldsToMatch)...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func (x *Entity) DBExists(fields []string) (bool, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") +
		" FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? AND ") + " = ? LIMIT 1"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return false, err
	}
	rows, err := stmt.Query(x.GetFieldsValues(fields)...)
	if err != nil {
		return false, err
	}
	defer rows.Close()
	results, err := readRows(Fields, rows)
	if err != nil {
		return false, err
	}
	if len(results) == 0 {
		return false, nil
	}
	*x = *results[0]
	return true, nil
}

func (x *Entity) DBExistsContext(ctx context.Context, fields []string) (bool, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") +
		" FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? AND ") + " = ? LIMIT 1"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return false, err
	}
	rows, err := stmt.QueryContext(ctx, x.GetFieldsValues(fields)...)
	if err != nil {
		return false, err
	}
	defer rows.Close()
	results, err := readRows(Fields, rows)
	if err != nil {
		return false, err
	}
	if len(results) == 0 {
		return false, nil
	}
	*x = *results[0]
	return true, nil
}

func (x *Entity) DBCountWhereAll(fields []string) (int, error) {
	query := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return 0, err
	}
	var count int
	err = stmt.QueryRow(x.GetFieldsValues(fields)...).Scan(&count)
	return count, err
}

func (x *Entity) DBCountWhereAllContext(ctx context.Context, fields []string) (int, error) {
	query := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? AND ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return 0, err
	}
	var count int
	err = stmt.QueryRowContext(ctx, x.GetFieldsValues(fields)...).Scan(&count)
	return count, err
}

func (x *Entity) DBCountWhereAny(fields []string) (int, error) {
	query := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return 0, err
	}
	var count int
	err = stmt.QueryRow(x.GetFieldsValues(fields)...).Scan(&count)
	return count, err
}

func (x *Entity) DBCountWhereAnyContext(ctx context.Context, fields []string) (int, error) {
	query := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? OR ") + " = ?"
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return 0, err
	}
	var count int
	err = stmt.QueryRowContext(ctx, x.GetFieldsValues(fields)...).Scan(&count)
	return count, err
}

func (x *Entity) DBFindOrCreate(fields []string) error {
	exists, err := x.DBExists(fields)
	if err != nil {
		return err
	}
	if exists {
		return nil
	}
	_, err = x.DBInsert(fields)
	if err != nil {
		return err
	}
	_, err = x.DBExists(fields)
	if err != nil {
		return err
	}
	return nil
}

func (x *Entity) DBFindOrCreateContext(ctx context.Context, fields []string) error {
	exists, err := x.DBExistsContext(ctx, fields)
	if err != nil {
		return err
	}
	if exists {
		return nil
	}
	_, err = x.DBInsertContext(ctx, fields)
	if err != nil {
		return err
	}
	_, err = x.DBExistsContext(ctx, fields)
	if err != nil {
		return err
	}
	return nil
}

func (x *Entity) DBSubquerySelectAllWhereAll(fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE (" + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?) " + subquery
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)
	rows, err := stmt.Query(allArgs...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func (x *Entity) DBSubquerySelectAllWhereAllContext(ctx context.Context, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE (" + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?) " + subquery
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)
	rows, err := stmt.QueryContext(ctx, allArgs...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func (x *Entity) DBSubquerySelectAllWhereAny(fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE (" + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?) " + subquery
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)
	rows, err := stmt.Query(allArgs...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}

func (x *Entity) DBSubquerySelectAllWhereAnyContext(ctx context.Context, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {
	query := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN +
		" WHERE (" + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?) " + subquery
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)
	rows, err := stmt.QueryContext(ctx, allArgs...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	return readRows(Fields, rows)
}
