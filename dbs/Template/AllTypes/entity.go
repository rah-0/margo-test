package AllTypes

// ---------------------------------------------------------------
// The code in this file is autogenerated, do not modify manually!
// ---------------------------------------------------------------

import (
	"context"
	"database/sql"
	"strings"
	"sync"
)

const (
	FQTN                 = "`template`.`all_types`"
	FieldId              = "id"
	FieldTinySigned      = "tiny_signed"
	FieldTinyUnsigned    = "tiny_unsigned"
	FieldSmallSigned     = "small_signed"
	FieldSmallUnsigned   = "small_unsigned"
	FieldMediumSigned    = "medium_signed"
	FieldMediumUnsigned  = "medium_unsigned"
	FieldIntSigned       = "int_signed"
	FieldIntUnsigned     = "int_unsigned"
	FieldBigSigned       = "big_signed"
	FieldBigUnsigned     = "big_unsigned"
	FieldFloatField      = "float_field"
	FieldDoubleField     = "double_field"
	FieldRealField       = "real_field"
	FieldDecimalField    = "decimal_field"
	FieldDecField        = "dec_field"
	FieldNumericField    = "numeric_field"
	FieldFixedField      = "fixed_field"
	FieldBit1            = "bit1"
	FieldBit8            = "bit8"
	FieldBit64           = "bit64"
	FieldBoolField       = "bool_field"
	FieldBooleanField    = "boolean_field"
	FieldCharField       = "char_field"
	FieldVarcharField    = "varchar_field"
	FieldTextField       = "text_field"
	FieldTinytextField   = "tinytext_field"
	FieldMediumtextField = "mediumtext_field"
	FieldLongtextField   = "longtext_field"
	FieldEnumField       = "enum_field"
	FieldSetField        = "set_field"
	FieldBinaryField     = "binary_field"
	FieldVarbinaryField  = "varbinary_field"
	FieldBlobField       = "blob_field"
	FieldTinyblobField   = "tinyblob_field"
	FieldMediumblobField = "mediumblob_field"
	FieldLongblobField   = "longblob_field"
	FieldDateField       = "date_field"
	FieldTimeField       = "time_field"
	FieldYearField       = "year_field"
	FieldDatetimeField   = "datetime_field"
	FieldTimestampField  = "timestamp_field"
	FieldUuidField       = "uuid_field"
)

var (
	Fields    = []string{FieldId, FieldTinySigned, FieldTinyUnsigned, FieldSmallSigned, FieldSmallUnsigned, FieldMediumSigned, FieldMediumUnsigned, FieldIntSigned, FieldIntUnsigned, FieldBigSigned, FieldBigUnsigned, FieldFloatField, FieldDoubleField, FieldRealField, FieldDecimalField, FieldDecField, FieldNumericField, FieldFixedField, FieldBit1, FieldBit8, FieldBit64, FieldBoolField, FieldBooleanField, FieldCharField, FieldVarcharField, FieldTextField, FieldTinytextField, FieldMediumtextField, FieldLongtextField, FieldEnumField, FieldSetField, FieldBinaryField, FieldVarbinaryField, FieldBlobField, FieldTinyblobField, FieldMediumblobField, FieldLongblobField, FieldDateField, FieldTimeField, FieldYearField, FieldDatetimeField, FieldTimestampField, FieldUuidField}
	db        *sql.DB
	stmtMu    sync.RWMutex
	stmtCache = make(map[string]*sql.Stmt)
)

type Entity struct {
	Id              string `json:",omitempty,omitzero"`
	TinySigned      string `json:",omitempty,omitzero"`
	TinyUnsigned    string `json:",omitempty,omitzero"`
	SmallSigned     string `json:",omitempty,omitzero"`
	SmallUnsigned   string `json:",omitempty,omitzero"`
	MediumSigned    string `json:",omitempty,omitzero"`
	MediumUnsigned  string `json:",omitempty,omitzero"`
	IntSigned       string `json:",omitempty,omitzero"`
	IntUnsigned     string `json:",omitempty,omitzero"`
	BigSigned       string `json:",omitempty,omitzero"`
	BigUnsigned     string `json:",omitempty,omitzero"`
	FloatField      string `json:",omitempty,omitzero"`
	DoubleField     string `json:",omitempty,omitzero"`
	RealField       string `json:",omitempty,omitzero"`
	DecimalField    string `json:",omitempty,omitzero"`
	DecField        string `json:",omitempty,omitzero"`
	NumericField    string `json:",omitempty,omitzero"`
	FixedField      string `json:",omitempty,omitzero"`
	Bit1            string `json:",omitempty,omitzero"`
	Bit8            string `json:",omitempty,omitzero"`
	Bit64           string `json:",omitempty,omitzero"`
	BoolField       string `json:",omitempty,omitzero"`
	BooleanField    string `json:",omitempty,omitzero"`
	CharField       string `json:",omitempty,omitzero"`
	VarcharField    string `json:",omitempty,omitzero"`
	TextField       string `json:",omitempty,omitzero"`
	TinytextField   string `json:",omitempty,omitzero"`
	MediumtextField string `json:",omitempty,omitzero"`
	LongtextField   string `json:",omitempty,omitzero"`
	EnumField       string `json:",omitempty,omitzero"`
	SetField        string `json:",omitempty,omitzero"`
	BinaryField     string `json:",omitempty,omitzero"`
	VarbinaryField  string `json:",omitempty,omitzero"`
	BlobField       string `json:",omitempty,omitzero"`
	TinyblobField   string `json:",omitempty,omitzero"`
	MediumblobField string `json:",omitempty,omitzero"`
	LongblobField   string `json:",omitempty,omitzero"`
	DateField       string `json:",omitempty,omitzero"`
	TimeField       string `json:",omitempty,omitzero"`
	YearField       string `json:",omitempty,omitzero"`
	DatetimeField   string `json:",omitempty,omitzero"`
	TimestampField  string `json:",omitempty,omitzero"`
	UuidField       string `json:",omitempty,omitzero"`
}

func SetDB(x *sql.DB) {
	db = x
}

func (x *Entity) GetFieldValue(field string) any {
	switch field {
	case FieldId:
		return x.Id
	case FieldTinySigned:
		return x.TinySigned
	case FieldTinyUnsigned:
		return x.TinyUnsigned
	case FieldSmallSigned:
		return x.SmallSigned
	case FieldSmallUnsigned:
		return x.SmallUnsigned
	case FieldMediumSigned:
		return x.MediumSigned
	case FieldMediumUnsigned:
		return x.MediumUnsigned
	case FieldIntSigned:
		return x.IntSigned
	case FieldIntUnsigned:
		return x.IntUnsigned
	case FieldBigSigned:
		return x.BigSigned
	case FieldBigUnsigned:
		return x.BigUnsigned
	case FieldFloatField:
		return x.FloatField
	case FieldDoubleField:
		return x.DoubleField
	case FieldRealField:
		return x.RealField
	case FieldDecimalField:
		return x.DecimalField
	case FieldDecField:
		return x.DecField
	case FieldNumericField:
		return x.NumericField
	case FieldFixedField:
		return x.FixedField
	case FieldBit1:
		return x.Bit1
	case FieldBit8:
		return x.Bit8
	case FieldBit64:
		return x.Bit64
	case FieldBoolField:
		return x.BoolField
	case FieldBooleanField:
		return x.BooleanField
	case FieldCharField:
		return x.CharField
	case FieldVarcharField:
		return x.VarcharField
	case FieldTextField:
		return x.TextField
	case FieldTinytextField:
		return x.TinytextField
	case FieldMediumtextField:
		return x.MediumtextField
	case FieldLongtextField:
		return x.LongtextField
	case FieldEnumField:
		return x.EnumField
	case FieldSetField:
		return x.SetField
	case FieldBinaryField:
		return x.BinaryField
	case FieldVarbinaryField:
		return x.VarbinaryField
	case FieldBlobField:
		return x.BlobField
	case FieldTinyblobField:
		return x.TinyblobField
	case FieldMediumblobField:
		return x.MediumblobField
	case FieldLongblobField:
		return x.LongblobField
	case FieldDateField:
		return x.DateField
	case FieldTimeField:
		return x.TimeField
	case FieldYearField:
		return x.YearField
	case FieldDatetimeField:
		return x.DatetimeField
	case FieldTimestampField:
		return x.TimestampField
	case FieldUuidField:
		return x.UuidField
	}
	return nil
}

func (x *Entity) GetFieldsValues(fieldList []string) []any {
	values := make([]any, 0, len(fieldList))
	for _, field := range fieldList {
		values = append(values, x.GetFieldValue(field))
	}
	return values
}

func GetValuePlaceholder(field string) string {
	switch field {
	case FieldId:
		return "?"
	case FieldTinySigned:
		return "?"
	case FieldTinyUnsigned:
		return "?"
	case FieldSmallSigned:
		return "?"
	case FieldSmallUnsigned:
		return "?"
	case FieldMediumSigned:
		return "?"
	case FieldMediumUnsigned:
		return "?"
	case FieldIntSigned:
		return "?"
	case FieldIntUnsigned:
		return "?"
	case FieldBigSigned:
		return "?"
	case FieldBigUnsigned:
		return "?"
	case FieldFloatField:
		return "?"
	case FieldDoubleField:
		return "?"
	case FieldRealField:
		return "?"
	case FieldDecimalField:
		return "?"
	case FieldDecField:
		return "?"
	case FieldNumericField:
		return "?"
	case FieldFixedField:
		return "?"
	case FieldBit1:
		return "?"
	case FieldBit8:
		return "?"
	case FieldBit64:
		return "?"
	case FieldBoolField:
		return "?"
	case FieldBooleanField:
		return "?"
	case FieldCharField:
		return "?"
	case FieldVarcharField:
		return "?"
	case FieldTextField:
		return "?"
	case FieldTinytextField:
		return "?"
	case FieldMediumtextField:
		return "?"
	case FieldLongtextField:
		return "?"
	case FieldEnumField:
		return "?"
	case FieldSetField:
		return "?"
	case FieldBinaryField:
		return "?"
	case FieldVarbinaryField:
		return "?"
	case FieldBlobField:
		return "?"
	case FieldTinyblobField:
		return "?"
	case FieldMediumblobField:
		return "?"
	case FieldLongblobField:
		return "?"
	case FieldDateField:
		return "?"
	case FieldTimeField:
		return "?"
	case FieldYearField:
		return "?"
	case FieldDatetimeField:
		return "?"
	case FieldTimestampField:
		return "?"
	case FieldUuidField:
		return "?"
	}
	return ""
}

func GetValuesPlaceholders(fieldList []string) []string {
	placeholders := make([]string, 0, len(fieldList))
	for _, field := range fieldList {
		placeholders = append(placeholders, GetValuePlaceholder(field))
	}
	return placeholders
}

func GetQualifiedField(field string) string {
	switch field {
	case FieldId:
		return FQTN + ".`" + FieldId + "`"
	case FieldTinySigned:
		return FQTN + ".`" + FieldTinySigned + "`"
	case FieldTinyUnsigned:
		return FQTN + ".`" + FieldTinyUnsigned + "`"
	case FieldSmallSigned:
		return FQTN + ".`" + FieldSmallSigned + "`"
	case FieldSmallUnsigned:
		return FQTN + ".`" + FieldSmallUnsigned + "`"
	case FieldMediumSigned:
		return FQTN + ".`" + FieldMediumSigned + "`"
	case FieldMediumUnsigned:
		return FQTN + ".`" + FieldMediumUnsigned + "`"
	case FieldIntSigned:
		return FQTN + ".`" + FieldIntSigned + "`"
	case FieldIntUnsigned:
		return FQTN + ".`" + FieldIntUnsigned + "`"
	case FieldBigSigned:
		return FQTN + ".`" + FieldBigSigned + "`"
	case FieldBigUnsigned:
		return FQTN + ".`" + FieldBigUnsigned + "`"
	case FieldFloatField:
		return FQTN + ".`" + FieldFloatField + "`"
	case FieldDoubleField:
		return FQTN + ".`" + FieldDoubleField + "`"
	case FieldRealField:
		return FQTN + ".`" + FieldRealField + "`"
	case FieldDecimalField:
		return FQTN + ".`" + FieldDecimalField + "`"
	case FieldDecField:
		return FQTN + ".`" + FieldDecField + "`"
	case FieldNumericField:
		return FQTN + ".`" + FieldNumericField + "`"
	case FieldFixedField:
		return FQTN + ".`" + FieldFixedField + "`"
	case FieldBit1:
		return FQTN + ".`" + FieldBit1 + "`"
	case FieldBit8:
		return FQTN + ".`" + FieldBit8 + "`"
	case FieldBit64:
		return FQTN + ".`" + FieldBit64 + "`"
	case FieldBoolField:
		return FQTN + ".`" + FieldBoolField + "`"
	case FieldBooleanField:
		return FQTN + ".`" + FieldBooleanField + "`"
	case FieldCharField:
		return FQTN + ".`" + FieldCharField + "`"
	case FieldVarcharField:
		return FQTN + ".`" + FieldVarcharField + "`"
	case FieldTextField:
		return FQTN + ".`" + FieldTextField + "`"
	case FieldTinytextField:
		return FQTN + ".`" + FieldTinytextField + "`"
	case FieldMediumtextField:
		return FQTN + ".`" + FieldMediumtextField + "`"
	case FieldLongtextField:
		return FQTN + ".`" + FieldLongtextField + "`"
	case FieldEnumField:
		return FQTN + ".`" + FieldEnumField + "`"
	case FieldSetField:
		return FQTN + ".`" + FieldSetField + "`"
	case FieldBinaryField:
		return FQTN + ".`" + FieldBinaryField + "`"
	case FieldVarbinaryField:
		return FQTN + ".`" + FieldVarbinaryField + "`"
	case FieldBlobField:
		return FQTN + ".`" + FieldBlobField + "`"
	case FieldTinyblobField:
		return FQTN + ".`" + FieldTinyblobField + "`"
	case FieldMediumblobField:
		return FQTN + ".`" + FieldMediumblobField + "`"
	case FieldLongblobField:
		return FQTN + ".`" + FieldLongblobField + "`"
	case FieldDateField:
		return FQTN + ".`" + FieldDateField + "`"
	case FieldTimeField:
		return FQTN + ".`" + FieldTimeField + "`"
	case FieldYearField:
		return FQTN + ".`" + FieldYearField + "`"
	case FieldDatetimeField:
		return FQTN + ".`" + FieldDatetimeField + "`"
	case FieldTimestampField:
		return FQTN + ".`" + FieldTimestampField + "`"
	case FieldUuidField:
		return FQTN + ".`" + FieldUuidField + "`"
	}
	return ""
}

func GetQualifiedFields(fieldList []string) []string {
	fields := make([]string, 0, len(fieldList))
	for _, field := range fieldList {
		fields = append(fields, GetQualifiedField(field))
	}
	return fields
}

func GetQualifiedPlaceholder(field string) string {
	switch field {
	case FieldId:
		return FQTN + ".`" + FieldId + "` = ?"
	case FieldTinySigned:
		return FQTN + ".`" + FieldTinySigned + "` = ?"
	case FieldTinyUnsigned:
		return FQTN + ".`" + FieldTinyUnsigned + "` = ?"
	case FieldSmallSigned:
		return FQTN + ".`" + FieldSmallSigned + "` = ?"
	case FieldSmallUnsigned:
		return FQTN + ".`" + FieldSmallUnsigned + "` = ?"
	case FieldMediumSigned:
		return FQTN + ".`" + FieldMediumSigned + "` = ?"
	case FieldMediumUnsigned:
		return FQTN + ".`" + FieldMediumUnsigned + "` = ?"
	case FieldIntSigned:
		return FQTN + ".`" + FieldIntSigned + "` = ?"
	case FieldIntUnsigned:
		return FQTN + ".`" + FieldIntUnsigned + "` = ?"
	case FieldBigSigned:
		return FQTN + ".`" + FieldBigSigned + "` = ?"
	case FieldBigUnsigned:
		return FQTN + ".`" + FieldBigUnsigned + "` = ?"
	case FieldFloatField:
		return FQTN + ".`" + FieldFloatField + "` = ?"
	case FieldDoubleField:
		return FQTN + ".`" + FieldDoubleField + "` = ?"
	case FieldRealField:
		return FQTN + ".`" + FieldRealField + "` = ?"
	case FieldDecimalField:
		return FQTN + ".`" + FieldDecimalField + "` = ?"
	case FieldDecField:
		return FQTN + ".`" + FieldDecField + "` = ?"
	case FieldNumericField:
		return FQTN + ".`" + FieldNumericField + "` = ?"
	case FieldFixedField:
		return FQTN + ".`" + FieldFixedField + "` = ?"
	case FieldBit1:
		return FQTN + ".`" + FieldBit1 + "` = ?"
	case FieldBit8:
		return FQTN + ".`" + FieldBit8 + "` = ?"
	case FieldBit64:
		return FQTN + ".`" + FieldBit64 + "` = ?"
	case FieldBoolField:
		return FQTN + ".`" + FieldBoolField + "` = ?"
	case FieldBooleanField:
		return FQTN + ".`" + FieldBooleanField + "` = ?"
	case FieldCharField:
		return FQTN + ".`" + FieldCharField + "` = ?"
	case FieldVarcharField:
		return FQTN + ".`" + FieldVarcharField + "` = ?"
	case FieldTextField:
		return FQTN + ".`" + FieldTextField + "` = ?"
	case FieldTinytextField:
		return FQTN + ".`" + FieldTinytextField + "` = ?"
	case FieldMediumtextField:
		return FQTN + ".`" + FieldMediumtextField + "` = ?"
	case FieldLongtextField:
		return FQTN + ".`" + FieldLongtextField + "` = ?"
	case FieldEnumField:
		return FQTN + ".`" + FieldEnumField + "` = ?"
	case FieldSetField:
		return FQTN + ".`" + FieldSetField + "` = ?"
	case FieldBinaryField:
		return FQTN + ".`" + FieldBinaryField + "` = ?"
	case FieldVarbinaryField:
		return FQTN + ".`" + FieldVarbinaryField + "` = ?"
	case FieldBlobField:
		return FQTN + ".`" + FieldBlobField + "` = ?"
	case FieldTinyblobField:
		return FQTN + ".`" + FieldTinyblobField + "` = ?"
	case FieldMediumblobField:
		return FQTN + ".`" + FieldMediumblobField + "` = ?"
	case FieldLongblobField:
		return FQTN + ".`" + FieldLongblobField + "` = ?"
	case FieldDateField:
		return FQTN + ".`" + FieldDateField + "` = ?"
	case FieldTimeField:
		return FQTN + ".`" + FieldTimeField + "` = ?"
	case FieldYearField:
		return FQTN + ".`" + FieldYearField + "` = ?"
	case FieldDatetimeField:
		return FQTN + ".`" + FieldDatetimeField + "` = ?"
	case FieldTimestampField:
		return FQTN + ".`" + FieldTimestampField + "` = ?"
	case FieldUuidField:
		return FQTN + ".`" + FieldUuidField + "` = ?"
	}
	return ""
}

func GetQualifiedPlaceholders(fieldList []string) []string {
	placeholders := make([]string, 0, len(fieldList))
	for _, field := range fieldList {
		placeholders = append(placeholders, GetQualifiedPlaceholder(field))
	}
	return placeholders
}

func getPreparedStmt(query string) (*sql.Stmt, error) {
	stmtMu.RLock()
	if stmt, ok := stmtCache[query]; ok {
		stmtMu.RUnlock()
		return stmt, nil
	}
	stmtMu.RUnlock()

	stmtMu.Lock()
	defer stmtMu.Unlock()
	if stmt, ok := stmtCache[query]; ok {
		return stmt, nil
	}
	stmt, err := db.Prepare(query)
	if err != nil {
		return nil, err
	}
	stmtCache[query] = stmt
	return stmt, nil
}

func scanRow(fields []string, rows *sql.Rows) (*Entity, error) {
	x := &Entity{}
	var (
		ptrId              *string
		ptrTinySigned      *string
		ptrTinyUnsigned    *string
		ptrSmallSigned     *string
		ptrSmallUnsigned   *string
		ptrMediumSigned    *string
		ptrMediumUnsigned  *string
		ptrIntSigned       *string
		ptrIntUnsigned     *string
		ptrBigSigned       *string
		ptrBigUnsigned     *string
		ptrFloatField      *string
		ptrDoubleField     *string
		ptrRealField       *string
		ptrDecimalField    *string
		ptrDecField        *string
		ptrNumericField    *string
		ptrFixedField      *string
		ptrBit1            *string
		ptrBit8            *string
		ptrBit64           *string
		ptrBoolField       *string
		ptrBooleanField    *string
		ptrCharField       *string
		ptrVarcharField    *string
		ptrTextField       *string
		ptrTinytextField   *string
		ptrMediumtextField *string
		ptrLongtextField   *string
		ptrEnumField       *string
		ptrSetField        *string
		ptrBinaryField     *string
		ptrVarbinaryField  *string
		ptrBlobField       *string
		ptrTinyblobField   *string
		ptrMediumblobField *string
		ptrLongblobField   *string
		ptrDateField       *string
		ptrTimeField       *string
		ptrYearField       *string
		ptrDatetimeField   *string
		ptrTimestampField  *string
		ptrUuidField       *string
		scanTargets        []any
	)

	for _, field := range fields {
		switch field {
		case FieldId:
			scanTargets = append(scanTargets, &ptrId)
		case FieldTinySigned:
			scanTargets = append(scanTargets, &ptrTinySigned)
		case FieldTinyUnsigned:
			scanTargets = append(scanTargets, &ptrTinyUnsigned)
		case FieldSmallSigned:
			scanTargets = append(scanTargets, &ptrSmallSigned)
		case FieldSmallUnsigned:
			scanTargets = append(scanTargets, &ptrSmallUnsigned)
		case FieldMediumSigned:
			scanTargets = append(scanTargets, &ptrMediumSigned)
		case FieldMediumUnsigned:
			scanTargets = append(scanTargets, &ptrMediumUnsigned)
		case FieldIntSigned:
			scanTargets = append(scanTargets, &ptrIntSigned)
		case FieldIntUnsigned:
			scanTargets = append(scanTargets, &ptrIntUnsigned)
		case FieldBigSigned:
			scanTargets = append(scanTargets, &ptrBigSigned)
		case FieldBigUnsigned:
			scanTargets = append(scanTargets, &ptrBigUnsigned)
		case FieldFloatField:
			scanTargets = append(scanTargets, &ptrFloatField)
		case FieldDoubleField:
			scanTargets = append(scanTargets, &ptrDoubleField)
		case FieldRealField:
			scanTargets = append(scanTargets, &ptrRealField)
		case FieldDecimalField:
			scanTargets = append(scanTargets, &ptrDecimalField)
		case FieldDecField:
			scanTargets = append(scanTargets, &ptrDecField)
		case FieldNumericField:
			scanTargets = append(scanTargets, &ptrNumericField)
		case FieldFixedField:
			scanTargets = append(scanTargets, &ptrFixedField)
		case FieldBit1:
			scanTargets = append(scanTargets, &ptrBit1)
		case FieldBit8:
			scanTargets = append(scanTargets, &ptrBit8)
		case FieldBit64:
			scanTargets = append(scanTargets, &ptrBit64)
		case FieldBoolField:
			scanTargets = append(scanTargets, &ptrBoolField)
		case FieldBooleanField:
			scanTargets = append(scanTargets, &ptrBooleanField)
		case FieldCharField:
			scanTargets = append(scanTargets, &ptrCharField)
		case FieldVarcharField:
			scanTargets = append(scanTargets, &ptrVarcharField)
		case FieldTextField:
			scanTargets = append(scanTargets, &ptrTextField)
		case FieldTinytextField:
			scanTargets = append(scanTargets, &ptrTinytextField)
		case FieldMediumtextField:
			scanTargets = append(scanTargets, &ptrMediumtextField)
		case FieldLongtextField:
			scanTargets = append(scanTargets, &ptrLongtextField)
		case FieldEnumField:
			scanTargets = append(scanTargets, &ptrEnumField)
		case FieldSetField:
			scanTargets = append(scanTargets, &ptrSetField)
		case FieldBinaryField:
			scanTargets = append(scanTargets, &ptrBinaryField)
		case FieldVarbinaryField:
			scanTargets = append(scanTargets, &ptrVarbinaryField)
		case FieldBlobField:
			scanTargets = append(scanTargets, &ptrBlobField)
		case FieldTinyblobField:
			scanTargets = append(scanTargets, &ptrTinyblobField)
		case FieldMediumblobField:
			scanTargets = append(scanTargets, &ptrMediumblobField)
		case FieldLongblobField:
			scanTargets = append(scanTargets, &ptrLongblobField)
		case FieldDateField:
			scanTargets = append(scanTargets, &ptrDateField)
		case FieldTimeField:
			scanTargets = append(scanTargets, &ptrTimeField)
		case FieldYearField:
			scanTargets = append(scanTargets, &ptrYearField)
		case FieldDatetimeField:
			scanTargets = append(scanTargets, &ptrDatetimeField)
		case FieldTimestampField:
			scanTargets = append(scanTargets, &ptrTimestampField)
		case FieldUuidField:
			scanTargets = append(scanTargets, &ptrUuidField)
		}
	}

	err := rows.Scan(scanTargets...)
	if err != nil {
		return nil, err
	}

	if ptrId != nil {
		x.Id = *ptrId
	} else {
		x.Id = ""
	}
	if ptrTinySigned != nil {
		x.TinySigned = *ptrTinySigned
	} else {
		x.TinySigned = ""
	}
	if ptrTinyUnsigned != nil {
		x.TinyUnsigned = *ptrTinyUnsigned
	} else {
		x.TinyUnsigned = ""
	}
	if ptrSmallSigned != nil {
		x.SmallSigned = *ptrSmallSigned
	} else {
		x.SmallSigned = ""
	}
	if ptrSmallUnsigned != nil {
		x.SmallUnsigned = *ptrSmallUnsigned
	} else {
		x.SmallUnsigned = ""
	}
	if ptrMediumSigned != nil {
		x.MediumSigned = *ptrMediumSigned
	} else {
		x.MediumSigned = ""
	}
	if ptrMediumUnsigned != nil {
		x.MediumUnsigned = *ptrMediumUnsigned
	} else {
		x.MediumUnsigned = ""
	}
	if ptrIntSigned != nil {
		x.IntSigned = *ptrIntSigned
	} else {
		x.IntSigned = ""
	}
	if ptrIntUnsigned != nil {
		x.IntUnsigned = *ptrIntUnsigned
	} else {
		x.IntUnsigned = ""
	}
	if ptrBigSigned != nil {
		x.BigSigned = *ptrBigSigned
	} else {
		x.BigSigned = ""
	}
	if ptrBigUnsigned != nil {
		x.BigUnsigned = *ptrBigUnsigned
	} else {
		x.BigUnsigned = ""
	}
	if ptrFloatField != nil {
		x.FloatField = *ptrFloatField
	} else {
		x.FloatField = ""
	}
	if ptrDoubleField != nil {
		x.DoubleField = *ptrDoubleField
	} else {
		x.DoubleField = ""
	}
	if ptrRealField != nil {
		x.RealField = *ptrRealField
	} else {
		x.RealField = ""
	}
	if ptrDecimalField != nil {
		x.DecimalField = *ptrDecimalField
	} else {
		x.DecimalField = ""
	}
	if ptrDecField != nil {
		x.DecField = *ptrDecField
	} else {
		x.DecField = ""
	}
	if ptrNumericField != nil {
		x.NumericField = *ptrNumericField
	} else {
		x.NumericField = ""
	}
	if ptrFixedField != nil {
		x.FixedField = *ptrFixedField
	} else {
		x.FixedField = ""
	}
	if ptrBit1 != nil {
		x.Bit1 = *ptrBit1
	} else {
		x.Bit1 = ""
	}
	if ptrBit8 != nil {
		x.Bit8 = *ptrBit8
	} else {
		x.Bit8 = ""
	}
	if ptrBit64 != nil {
		x.Bit64 = *ptrBit64
	} else {
		x.Bit64 = ""
	}
	if ptrBoolField != nil {
		x.BoolField = *ptrBoolField
	} else {
		x.BoolField = ""
	}
	if ptrBooleanField != nil {
		x.BooleanField = *ptrBooleanField
	} else {
		x.BooleanField = ""
	}
	if ptrCharField != nil {
		x.CharField = *ptrCharField
	} else {
		x.CharField = ""
	}
	if ptrVarcharField != nil {
		x.VarcharField = *ptrVarcharField
	} else {
		x.VarcharField = ""
	}
	if ptrTextField != nil {
		x.TextField = *ptrTextField
	} else {
		x.TextField = ""
	}
	if ptrTinytextField != nil {
		x.TinytextField = *ptrTinytextField
	} else {
		x.TinytextField = ""
	}
	if ptrMediumtextField != nil {
		x.MediumtextField = *ptrMediumtextField
	} else {
		x.MediumtextField = ""
	}
	if ptrLongtextField != nil {
		x.LongtextField = *ptrLongtextField
	} else {
		x.LongtextField = ""
	}
	if ptrEnumField != nil {
		x.EnumField = *ptrEnumField
	} else {
		x.EnumField = ""
	}
	if ptrSetField != nil {
		x.SetField = *ptrSetField
	} else {
		x.SetField = ""
	}
	if ptrBinaryField != nil {
		x.BinaryField = *ptrBinaryField
	} else {
		x.BinaryField = ""
	}
	if ptrVarbinaryField != nil {
		x.VarbinaryField = *ptrVarbinaryField
	} else {
		x.VarbinaryField = ""
	}
	if ptrBlobField != nil {
		x.BlobField = *ptrBlobField
	} else {
		x.BlobField = ""
	}
	if ptrTinyblobField != nil {
		x.TinyblobField = *ptrTinyblobField
	} else {
		x.TinyblobField = ""
	}
	if ptrMediumblobField != nil {
		x.MediumblobField = *ptrMediumblobField
	} else {
		x.MediumblobField = ""
	}
	if ptrLongblobField != nil {
		x.LongblobField = *ptrLongblobField
	} else {
		x.LongblobField = ""
	}
	if ptrDateField != nil {
		x.DateField = *ptrDateField
	} else {
		x.DateField = ""
	}
	if ptrTimeField != nil {
		x.TimeField = *ptrTimeField
	} else {
		x.TimeField = ""
	}
	if ptrYearField != nil {
		x.YearField = *ptrYearField
	} else {
		x.YearField = ""
	}
	if ptrDatetimeField != nil {
		x.DatetimeField = *ptrDatetimeField
	} else {
		x.DatetimeField = ""
	}
	if ptrTimestampField != nil {
		x.TimestampField = *ptrTimestampField
	} else {
		x.TimestampField = ""
	}
	if ptrUuidField != nil {
		x.UuidField = *ptrUuidField
	} else {
		x.UuidField = ""
	}
	return x, nil
}

func readRows(fields []string, rows *sql.Rows) ([]*Entity, error) {
	defer rows.Close()
	var results []*Entity
	for rows.Next() {
		x, err := scanRow(fields, rows)
		if err != nil {
			return results, err
		}
		results = append(results, x)
	}
	if err := rows.Err(); err != nil {
		return results, err
	}
	return results, nil
}

func bindStmtCtxTx(base *sql.Stmt, ctx context.Context, tx *sql.Tx) (*sql.Stmt, bool) {
	if tx == nil {
		return base, false
	}
	if ctx != nil {
		return tx.StmtContext(ctx, base), true
	}
	return tx.Stmt(base), true
}

func execCore(ctx *context.Context, tx *sql.Tx, query string, args ...any) (res sql.Result, err error) {
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	var c context.Context
	if ctx != nil {
		c = *ctx
	}
	s, needClose := bindStmtCtxTx(stmt, c, tx)
	if needClose {
		defer func() {
			if cerr := s.Close(); err == nil && cerr != nil {
				err = cerr
			}
		}()
	}
	if ctx != nil {
		return s.ExecContext(*ctx, args...)
	}
	return s.Exec(args...)
}

func queryCore(ctx *context.Context, tx *sql.Tx, fields []string, query string, args ...any) (out []*Entity, err error) {
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return nil, err
	}
	var c context.Context
	if ctx != nil {
		c = *ctx
	}
	s, needClose := bindStmtCtxTx(stmt, c, tx)
	if needClose {
		defer func() {
			if cerr := s.Close(); err == nil && cerr != nil {
				err = cerr
			}
		}()
	}
	var rows *sql.Rows
	if ctx != nil {
		rows, err = s.QueryContext(*ctx, args...)
	} else {
		rows, err = s.Query(args...)
	}
	if err != nil {
		return nil, err
	}
	return readRows(fields, rows)
}

func scalarCore(ctx *context.Context, tx *sql.Tx, query string, args ...any) (int, error) {
	stmt, err := getPreparedStmt(query)
	if err != nil {
		return 0, err
	}
	var c context.Context
	if ctx != nil {
		c = *ctx
	}
	s, needClose := bindStmtCtxTx(stmt, c, tx)
	if needClose {
		defer s.Close()
	}
	var v int
	if ctx != nil {
		err = s.QueryRowContext(*ctx, args...).Scan(&v)
	} else {
		err = s.QueryRow(args...).Scan(&v)
	}
	return v, err
}

func DBTruncate() (sql.Result, error) { return execCore(nil, nil, "TRUNCATE TABLE "+FQTN) }
func DBTruncateCtx(ctx context.Context) (sql.Result, error) {
	return execCore(&ctx, nil, "TRUNCATE TABLE "+FQTN)
}
func DBTruncateTx(tx *sql.Tx) (sql.Result, error) { return execCore(nil, tx, "TRUNCATE TABLE "+FQTN) }
func DBTruncateCtxTx(ctx context.Context, tx *sql.Tx) (sql.Result, error) {
	return execCore(&ctx, tx, "TRUNCATE TABLE "+FQTN)
}

func (x *Entity) DBInsert(fieldsToInsert []string) (sql.Result, error) {
	q := "INSERT INTO " + FQTN + " (" + strings.Join(GetQualifiedFields(fieldsToInsert), ", ") + ") VALUES (" + strings.Join(GetValuesPlaceholders(fieldsToInsert), ", ") + ")"
	return execCore(nil, nil, q, x.GetFieldsValues(fieldsToInsert)...)
}

func (x *Entity) DBInsertCtx(ctx context.Context, fieldsToInsert []string) (sql.Result, error) {
	q := "INSERT INTO " + FQTN + " (" + strings.Join(GetQualifiedFields(fieldsToInsert), ", ") + ") VALUES (" + strings.Join(GetValuesPlaceholders(fieldsToInsert), ", ") + ")"
	return execCore(&ctx, nil, q, x.GetFieldsValues(fieldsToInsert)...)
}

func (x *Entity) DBInsertTx(tx *sql.Tx, fieldsToInsert []string) (sql.Result, error) {
	q := "INSERT INTO " + FQTN + " (" + strings.Join(GetQualifiedFields(fieldsToInsert), ", ") + ") VALUES (" + strings.Join(GetValuesPlaceholders(fieldsToInsert), ", ") + ")"
	return execCore(nil, tx, q, x.GetFieldsValues(fieldsToInsert)...)
}

func (x *Entity) DBInsertCtxTx(ctx context.Context, tx *sql.Tx, fieldsToInsert []string) (sql.Result, error) {
	q := "INSERT INTO " + FQTN + " (" + strings.Join(GetQualifiedFields(fieldsToInsert), ", ") + ") VALUES (" + strings.Join(GetValuesPlaceholders(fieldsToInsert), ", ") + ")"
	return execCore(&ctx, tx, q, x.GetFieldsValues(fieldsToInsert)...)
}

func (x *Entity) DBDeleteWhereAll(fieldsToMatch []string) (sql.Result, error) {
	q := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	return execCore(nil, nil, q, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBDeleteWhereAllCtx(ctx context.Context, fieldsToMatch []string) (sql.Result, error) {
	q := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	return execCore(&ctx, nil, q, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBDeleteWhereAllTx(tx *sql.Tx, fieldsToMatch []string) (sql.Result, error) {
	q := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	return execCore(nil, tx, q, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBDeleteWhereAllCtxTx(ctx context.Context, tx *sql.Tx, fieldsToMatch []string) (sql.Result, error) {
	q := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	return execCore(&ctx, tx, q, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBDeleteWhereAny(fieldsToMatch []string) (sql.Result, error) {
	q := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	return execCore(nil, nil, q, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBDeleteWhereAnyCtx(ctx context.Context, fieldsToMatch []string) (sql.Result, error) {
	q := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	return execCore(&ctx, nil, q, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBDeleteWhereAnyTx(tx *sql.Tx, fieldsToMatch []string) (sql.Result, error) {
	q := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	return execCore(nil, tx, q, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBDeleteWhereAnyCtxTx(ctx context.Context, tx *sql.Tx, fieldsToMatch []string) (sql.Result, error) {
	q := "DELETE FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	return execCore(&ctx, tx, q, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBUpdateWhereAll(fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	q := "UPDATE " + FQTN + " SET " + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	vals := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)
	return execCore(nil, nil, q, vals...)
}

func (x *Entity) DBUpdateWhereAllCtx(ctx context.Context, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	q := "UPDATE " + FQTN + " SET " + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	vals := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)
	return execCore(&ctx, nil, q, vals...)
}

func (x *Entity) DBUpdateWhereAllTx(tx *sql.Tx, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	q := "UPDATE " + FQTN + " SET " + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	vals := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)
	return execCore(nil, tx, q, vals...)
}

func (x *Entity) DBUpdateWhereAllCtxTx(ctx context.Context, tx *sql.Tx, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	q := "UPDATE " + FQTN + " SET " + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	vals := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)
	return execCore(&ctx, tx, q, vals...)
}

func (x *Entity) DBUpdateWhereAny(fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	q := "UPDATE " + FQTN + " SET " + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	vals := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)
	return execCore(nil, nil, q, vals...)
}

func (x *Entity) DBUpdateWhereAnyCtx(ctx context.Context, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	q := "UPDATE " + FQTN + " SET " + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	vals := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)
	return execCore(&ctx, nil, q, vals...)
}

func (x *Entity) DBUpdateWhereAnyTx(tx *sql.Tx, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	q := "UPDATE " + FQTN + " SET " + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	vals := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)
	return execCore(nil, tx, q, vals...)
}

func (x *Entity) DBUpdateWhereAnyCtxTx(ctx context.Context, tx *sql.Tx, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {
	q := "UPDATE " + FQTN + " SET " + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), ", ") + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	vals := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)
	return execCore(&ctx, tx, q, vals...)
}

func DBSelectAll() ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN
	return queryCore(nil, nil, Fields, q)
}

func DBSelectAllCtx(ctx context.Context) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN
	return queryCore(&ctx, nil, Fields, q)
}

func DBSelectAllTx(tx *sql.Tx) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN
	return queryCore(nil, tx, Fields, q)
}

func DBSelectAllCtxTx(ctx context.Context, tx *sql.Tx) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN
	return queryCore(&ctx, tx, Fields, q)
}

func DBSelectAllWithFields(fields []string) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(fields), ", ") + " FROM " + FQTN
	return queryCore(nil, nil, fields, q)
}

func DBSelectAllWithFieldsCtx(ctx context.Context, fields []string) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(fields), ", ") + " FROM " + FQTN
	return queryCore(&ctx, nil, fields, q)
}

func DBSelectAllWithFieldsTx(tx *sql.Tx, fields []string) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(fields), ", ") + " FROM " + FQTN
	return queryCore(nil, tx, fields, q)
}

func DBSelectAllWithFieldsCtxTx(ctx context.Context, tx *sql.Tx, fields []string) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(fields), ", ") + " FROM " + FQTN
	return queryCore(&ctx, tx, fields, q)
}

func DBSubquerySelectAll(subquery string, args ...any) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " " + subquery
	return queryCore(nil, nil, Fields, q, args...)
}

func DBSubquerySelectAllCtx(ctx context.Context, subquery string, args ...any) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " " + subquery
	return queryCore(&ctx, nil, Fields, q, args...)
}

func DBSubquerySelectAllTx(tx *sql.Tx, subquery string, args ...any) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " " + subquery
	return queryCore(nil, tx, Fields, q, args...)
}

func DBSubquerySelectAllCtxTx(ctx context.Context, tx *sql.Tx, subquery string, args ...any) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " " + subquery
	return queryCore(&ctx, tx, Fields, q, args...)
}

func DBSubquerySelectAllWithFields(fields []string, subquery string, args ...any) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(fields), ", ") + " FROM " + FQTN + " " + subquery
	return queryCore(nil, nil, fields, q, args...)
}

func DBSubquerySelectAllWithFieldsCtx(ctx context.Context, fields []string, subquery string, args ...any) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(fields), ", ") + " FROM " + FQTN + " " + subquery
	return queryCore(&ctx, nil, fields, q, args...)
}

func DBSubquerySelectAllWithFieldsTx(tx *sql.Tx, fields []string, subquery string, args ...any) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(fields), ", ") + " FROM " + FQTN + " " + subquery
	return queryCore(nil, tx, fields, q, args...)
}

func DBSubquerySelectAllWithFieldsCtxTx(ctx context.Context, tx *sql.Tx, fields []string, subquery string, args ...any) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(fields), ", ") + " FROM " + FQTN + " " + subquery
	return queryCore(&ctx, tx, fields, q, args...)
}

func (x *Entity) DBSubquerySelectAllWhereAll(fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE (" + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?) " + subquery
	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)
	return queryCore(nil, nil, Fields, q, allArgs...)
}

func (x *Entity) DBSubquerySelectAllWhereAllCtx(ctx context.Context, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE (" + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?) " + subquery
	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)
	return queryCore(&ctx, nil, Fields, q, allArgs...)
}

func (x *Entity) DBSubquerySelectAllWhereAllTx(tx *sql.Tx, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE (" + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?) " + subquery
	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)
	return queryCore(nil, tx, Fields, q, allArgs...)
}

func (x *Entity) DBSubquerySelectAllWhereAllCtxTx(ctx context.Context, tx *sql.Tx, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE (" + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?) " + subquery
	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)
	return queryCore(&ctx, tx, Fields, q, allArgs...)
}

func (x *Entity) DBSubquerySelectAllWhereAny(fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE (" + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?) " + subquery
	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)
	return queryCore(nil, nil, Fields, q, allArgs...)
}

func (x *Entity) DBSubquerySelectAllWhereAnyCtx(ctx context.Context, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE (" + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?) " + subquery
	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)
	return queryCore(&ctx, nil, Fields, q, allArgs...)
}

func (x *Entity) DBSubquerySelectAllWhereAnyTx(tx *sql.Tx, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE (" + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?) " + subquery
	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)
	return queryCore(nil, tx, Fields, q, allArgs...)
}

func (x *Entity) DBSubquerySelectAllWhereAnyCtxTx(ctx context.Context, tx *sql.Tx, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE (" + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?) " + subquery
	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)
	return queryCore(&ctx, tx, Fields, q, allArgs...)
}

func (x *Entity) DBSelectAllWhereAll(fieldsToMatch []string) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	return queryCore(nil, nil, Fields, q, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBSelectAllWhereAllCtx(ctx context.Context, fieldsToMatch []string) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	return queryCore(&ctx, nil, Fields, q, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBSelectAllWhereAllTx(tx *sql.Tx, fieldsToMatch []string) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	return queryCore(nil, tx, Fields, q, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBSelectAllWhereAllCtxTx(ctx context.Context, tx *sql.Tx, fieldsToMatch []string) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? AND ") + " = ?"
	return queryCore(&ctx, tx, Fields, q, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBSelectAllWhereAny(fieldsToMatch []string) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	return queryCore(nil, nil, Fields, q, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBSelectAllWhereAnyCtx(ctx context.Context, fieldsToMatch []string) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	return queryCore(&ctx, nil, Fields, q, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBSelectAllWhereAnyTx(tx *sql.Tx, fieldsToMatch []string) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	return queryCore(nil, tx, Fields, q, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBSelectAllWhereAnyCtxTx(ctx context.Context, tx *sql.Tx, fieldsToMatch []string) ([]*Entity, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fieldsToMatch), " = ? OR ") + " = ?"
	return queryCore(&ctx, tx, Fields, q, x.GetFieldsValues(fieldsToMatch)...)
}

func (x *Entity) DBExists(fields []string) (bool, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? AND ") + " = ? LIMIT 1"
	res, err := queryCore(nil, nil, Fields, q, x.GetFieldsValues(fields)...)
	if err != nil {
		return false, err
	}
	if len(res) == 0 {
		return false, nil
	}
	*x = *res[0]
	return true, nil
}

func (x *Entity) DBExistsCtx(ctx context.Context, fields []string) (bool, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? AND ") + " = ? LIMIT 1"
	res, err := queryCore(&ctx, nil, Fields, q, x.GetFieldsValues(fields)...)
	if err != nil {
		return false, err
	}
	if len(res) == 0 {
		return false, nil
	}
	*x = *res[0]
	return true, nil
}

func (x *Entity) DBExistsTx(tx *sql.Tx, fields []string) (bool, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? AND ") + " = ? LIMIT 1"
	res, err := queryCore(nil, tx, Fields, q, x.GetFieldsValues(fields)...)
	if err != nil {
		return false, err
	}
	if len(res) == 0 {
		return false, nil
	}
	*x = *res[0]
	return true, nil
}

func (x *Entity) DBExistsCtxTx(ctx context.Context, tx *sql.Tx, fields []string) (bool, error) {
	q := "SELECT " + strings.Join(GetQualifiedFields(Fields), ", ") + " FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? AND ") + " = ? LIMIT 1"
	res, err := queryCore(&ctx, tx, Fields, q, x.GetFieldsValues(fields)...)
	if err != nil {
		return false, err
	}
	if len(res) == 0 {
		return false, nil
	}
	*x = *res[0]
	return true, nil
}

func (x *Entity) DBCountWhereAll(fields []string) (int, error) {
	q := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? AND ") + " = ?"
	return scalarCore(nil, nil, q, x.GetFieldsValues(fields)...)
}

func (x *Entity) DBCountWhereAllCtx(ctx context.Context, fields []string) (int, error) {
	q := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? AND ") + " = ?"
	return scalarCore(&ctx, nil, q, x.GetFieldsValues(fields)...)
}

func (x *Entity) DBCountWhereAllTx(tx *sql.Tx, fields []string) (int, error) {
	q := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? AND ") + " = ?"
	return scalarCore(nil, tx, q, x.GetFieldsValues(fields)...)
}

func (x *Entity) DBCountWhereAllCtxTx(ctx context.Context, tx *sql.Tx, fields []string) (int, error) {
	q := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? AND ") + " = ?"
	return scalarCore(&ctx, tx, q, x.GetFieldsValues(fields)...)
}

func (x *Entity) DBCountWhereAny(fields []string) (int, error) {
	q := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? OR ") + " = ?"
	return scalarCore(nil, nil, q, x.GetFieldsValues(fields)...)
}

func (x *Entity) DBCountWhereAnyCtx(ctx context.Context, fields []string) (int, error) {
	q := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? OR ") + " = ?"
	return scalarCore(&ctx, nil, q, x.GetFieldsValues(fields)...)
}

func (x *Entity) DBCountWhereAnyTx(tx *sql.Tx, fields []string) (int, error) {
	q := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? OR ") + " = ?"
	return scalarCore(nil, tx, q, x.GetFieldsValues(fields)...)
}

func (x *Entity) DBCountWhereAnyCtxTx(ctx context.Context, tx *sql.Tx, fields []string) (int, error) {
	q := "SELECT COUNT(*) FROM " + FQTN + " WHERE " + strings.Join(GetQualifiedFields(fields), " = ? OR ") + " = ?"
	return scalarCore(&ctx, tx, q, x.GetFieldsValues(fields)...)
}

func (x *Entity) DBFindOrCreate(fields []string) error {
	ok, err := x.DBExists(fields)
	if err != nil {
		return err
	}
	if ok {
		return nil
	}
	if _, err = x.DBInsert(fields); err != nil {
		return err
	}
	_, err = x.DBExists(fields)
	return err
}

func (x *Entity) DBFindOrCreateCtx(ctx context.Context, fields []string) error {
	ok, err := x.DBExistsCtx(ctx, fields)
	if err != nil {
		return err
	}
	if ok {
		return nil
	}
	if _, err = x.DBInsertCtx(ctx, fields); err != nil {
		return err
	}
	_, err = x.DBExistsCtx(ctx, fields)
	return err
}

func (x *Entity) DBFindOrCreateTx(tx *sql.Tx, fields []string) error {
	ok, err := x.DBExistsTx(tx, fields)
	if err != nil {
		return err
	}
	if ok {
		return nil
	}
	if _, err = x.DBInsertTx(tx, fields); err != nil {
		return err
	}
	_, err = x.DBExistsTx(tx, fields)
	return err
}

func (x *Entity) DBFindOrCreateCtxTx(ctx context.Context, tx *sql.Tx, fields []string) error {
	ok, err := x.DBExistsCtxTx(ctx, tx, fields)
	if err != nil {
		return err
	}
	if ok {
		return nil
	}
	if _, err = x.DBInsertCtxTx(ctx, tx, fields); err != nil {
		return err
	}
	_, err = x.DBExistsCtxTx(ctx, tx, fields)
	return err
}
